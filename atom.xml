<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小周的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-22T03:19:32.179Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>JOJO</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>测试学习4-更高级的测试</title>
    <link href="http://example.com/2022/07/21/py_day30/"/>
    <id>http://example.com/2022/07/21/py_day30/</id>
    <published>2022-07-21T08:53:19.520Z</published>
    <updated>2022-07-22T03:19:32.179Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、软件开发过程"><a href="#一、软件开发过程" class="headerlink" title="一、软件开发过程"></a>一、软件开发过程</h2><p>I、将软件最终用户的要求转换为一系列书面的需求。这些需求就是该软件产品要实现的目标。<br>II、通过评估可行性与成本、消除相抵触的用户需求、建立优先级和平衡关系，将用户需求转换为具体目标。<br>III、将上述目标转换为一个准确的产品规格说明，将产品是为一个黑盒，仅考虑其接口以及与最终用户的交互。该规格说明被称为【外部规格说明】<br>IV、如果该产品是一个系统，如操作系统、飞控系统、数据库管理系统等，而不仅是一个程序（编译器、工资程序、字处理程序），那么下一步骤就是系统设计。该步骤将系统分割为单独的程序、部件或子系统，并定义它们的接口。<br>V、通过定义每个模块的功能、模块的层次接口以及模块间的接口，来设计程序或程序集合的结构。<br>VI、设计一份准确的规格说明，定义每个模块的接口与功能。<br>VII、经过一个或更多的子步骤，将模块接口规格说明转换为每个模块的源代码算法。</p><p>最终用户 ——&gt; 需求 ——&gt; 目标 ——&gt; 外部规格说明 ——&gt; 系统设计 ——&gt; 程序结构设计 ——&gt; 模块结构规格说明 ——&gt; 代码</p><p>对应：<br>                        验收测试——&gt;系统测试——&gt;功能测试——&gt;集成测试——&gt;模块测试</p><hr><h2 id="二、功能测试"><a href="#二、功能测试" class="headerlink" title="二、功能测试"></a>二、功能测试</h2><p>功能测试是一个试图发现程序与其外部规格说明之间存在不一致的过程。</p><p>测试方法：等价类划分、边界值分析、因果图分析、错误猜测等。</p><hr><h2 id="三、系统测试"><a href="#三、系统测试" class="headerlink" title="三、系统测试"></a>三、系统测试</h2><p>系统测试目的：将系统或程序与其初始目标进行比较。</p><p>【通过分析目标文档来设计系统测试，分析用户文档来阐明测试用例】</p><p>测试用例类型：<br>1、能力测试<br>        判断目标文档提及的每一项能力是否都已经实现<br>2、容量测试<br>        使程序经受大容量数据的检验<br>3、强度测试<br>        使程序承受高负载或强度的检验，所谓高强度是指在很短的时间间隔内达到的数据或操作的数量峰值<br>4、易用性测试<br>5、安全性测试<br>6、性能测试<br>        在特定负载和配置环境下程序的响应时间和吞吐率<br>7、存储测试<br>8、配置测试<br>        面向所有操作系统环境（浏览器、IO设备、通信线路等）中对其进行测试<br>9、兼容性测试<br>10、安装测试<br>11、可靠性测试<br>12、可恢复性测试<br>        说明系统如何从程序错误、硬件失效和数据错误中恢复过来<br>13、适用性测试<br>14、文档测试<br>15、过程测试</p><hr><h2 id="四、验收测试"><a href="#四、验收测试" class="headerlink" title="四、验收测试"></a>四、验收测试</h2><p>验收测试是将程序与其最初的需求及最终用户当前的需要进行比较的过程。</p><hr><h2 id="五、安装测试"><a href="#五、安装测试" class="headerlink" title="五、安装测试"></a>五、安装测试</h2><hr><h2 id="六、测试的计划与控制"><a href="#六、测试的计划与控制" class="headerlink" title="六、测试的计划与控制"></a>六、测试的计划与控制</h2><p>一个良好的测试计划应该包括：<br>1、目标<br>2、结束准测<br>3、进度<br>4、责任<br>5、测试用例库及标准<br>6、工具<br>7、计算机时间<br>8、硬件配置<br>9、集成<br>10、跟踪步骤<br>11、调试步骤<br>12、回归测试</p><hr><h2 id="七、测试结束准则"><a href="#七、测试结束准则" class="headerlink" title="七、测试结束准则"></a>七、测试结束准则</h2>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、软件开发过程&quot;&gt;&lt;a href=&quot;#一、软件开发过程&quot; class=&quot;headerlink&quot; title=&quot;一、软件开发过程&quot;&gt;&lt;/a&gt;一、软件开发过程&lt;/h2&gt;&lt;p&gt;I、将软件最终用户的要求转换为一系列书面的需求。这些需求就是该软件产品要实现的目标。&lt;br&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试学习3-单元测试</title>
    <link href="http://example.com/2022/07/20/py_day29/"/>
    <id>http://example.com/2022/07/20/py_day29/</id>
    <published>2022-07-20T07:58:34.807Z</published>
    <updated>2022-07-21T08:52:07.973Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、测试用例设计"><a href="#一、测试用例设计" class="headerlink" title="一、测试用例设计"></a>一、测试用例设计</h2><p>【模块测试的测试用例设计过程如下：使用一中或多种白盒测试方法分析模块的逻辑结构，然后使用黑盒测试方法对照模块的规格说明以补充测试用例】</p><hr><h2 id="二、增量（集成）测试"><a href="#二、增量（集成）测试" class="headerlink" title="二、增量（集成）测试"></a>二、增量（集成）测试</h2><h3 id="1、自顶向下"><a href="#1、自顶向下" class="headerlink" title="1、自顶向下"></a>1、自顶向下</h3><p>自顶向下的测试是从程序的顶部或初始模块开始。唯一的原则是：要称为合乎条件的下一个模块，至少一个该模块的从属模块（调用它的模块）事先经过了测试。</p><p>指南：I、如果程序中存在关键部分，那么在设计模块序列时就应将这些关键模块尽可能早地添加进去。所谓 “关键部分” 可能是某个复杂地模块、某个采用新算法的模块或某个被怀疑容易发生错误的模块。<br>           II、在设计模块序列时，应将I/O模块尽可能早地添加进来。</p><p>带来的问题：在进行到下一个模块前未能穷举测试此模块。</p><h3 id="2、自底向上"><a href="#2、自底向上" class="headerlink" title="2、自底向上"></a>2、自底向上</h3><p>大多数情况下，自底向上的优点是自顶向下的缺点。其缺点又是自顶向下的优点。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、测试用例设计&quot;&gt;&lt;a href=&quot;#一、测试用例设计&quot; class=&quot;headerlink&quot; title=&quot;一、测试用例设计&quot;&gt;&lt;/a&gt;一、测试用例设计&lt;/h2&gt;&lt;p&gt;【模块测试的测试用例设计过程如下：使用一中或多种白盒测试方法分析模块的逻辑结构，然后使用黑盒</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试学习2-测试用例设计</title>
    <link href="http://example.com/2022/07/19/py_day28/"/>
    <id>http://example.com/2022/07/19/py_day28/</id>
    <published>2022-07-19T09:47:01.862Z</published>
    <updated>2022-07-20T07:57:19.233Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、白盒测试"><a href="#一、白盒测试" class="headerlink" title="一、白盒测试"></a>一、白盒测试</h2><p>【先使用黑盒测试方法来设计测试用例，然后视情况需要使用白盒测试方法来设计补充的测试用例】</p><h3 id="1、逻辑覆盖测试"><a href="#1、逻辑覆盖测试" class="headerlink" title="1、逻辑覆盖测试"></a>1、逻辑覆盖测试</h3><p>判定覆盖或分支覆盖准则：编写足够的测试用例，使得每一个判断都至少有一个为【真】和【假】的输出结果，并且每条语句都至少被执行一次。</p><p>条件覆盖准则：编写足够的测试用例，确保将一个判断中的每个条件的所有可能的结果至少执行一次。</p><p>判定/条件覆盖准则：将一个判断中的每个条件的所有可能的结果至少执行一次，将每个判断的所有可能的结果至少执行一次，将每个入口点都至少调用一次。</p><p>多重条件覆盖准则：将每个判定中的所有可能的条件结果组合，以及所有入口点都至少执行一次。</p><hr><h2 id="二、黑盒测试"><a href="#二、黑盒测试" class="headerlink" title="二、黑盒测试"></a>二、黑盒测试</h2><h3 id="1、等价划分"><a href="#1、等价划分" class="headerlink" title="1、等价划分"></a>1、等价划分</h3><p>步骤：<br>（1）确定等价类<br>                            有效等价类、无效等价类<br>（2）生成测试用例<br>                            I、为每个等价类设置一个不同的编号。<br>                            II、编写新的测试用例，尽可能多地覆盖那些尚未被覆盖的有效等价类，直到所有的有效等价类都被测试用例所覆盖。<br>                            III、编写新的用例，覆盖一个且仅一个尚未被覆盖的无效等价类，直到所有的无效等价类都被测试用例所覆盖。</p><h3 id="2、边界值分析"><a href="#2、边界值分析" class="headerlink" title="2、边界值分析"></a>2、边界值分析</h3><p>边界值分析考察正处于等价划分边界或在边界附近的状态。</p><h3 id="3、因果图"><a href="#3、因果图" class="headerlink" title="3、因果图"></a>3、因果图</h3><h3 id="4、错误猜测"><a href="#4、错误猜测" class="headerlink" title="4、错误猜测"></a>4、错误猜测</h3><hr><h2 id="三、测试策略"><a href="#三、测试策略" class="headerlink" title="三、测试策略"></a>三、测试策略</h2><p>1、如果规格说明中包含输入条件组合，使用因果图法<br>2、任何情况下都应使用边界值分析法。【对输入、输出边界进行分析】<br>3、应为输入和输出确定有效、无效等价类<br>4、使用错误猜测技术增加更多测试用例<br>5、针对上述测试用例集检查程序的逻辑结构，使判定覆盖、条件覆盖、判定条件覆盖、多重条件覆盖准则</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;一、白盒测试&quot;&gt;&lt;a href=&quot;#一、白盒测试&quot; class=&quot;headerlink&quot; title=&quot;一、白盒测试&quot;&gt;&lt;/a&gt;一、白盒测试&lt;/h2&gt;&lt;p&gt;【先使用黑盒测试方法来设计测试用例，然后视情况需要使用白盒测试方法来设计补充的测试用例】&lt;/p&gt;
&lt;h3 i</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>测试学习1</title>
    <link href="http://example.com/2022/07/19/py_day27/"/>
    <id>http://example.com/2022/07/19/py_day27/</id>
    <published>2022-07-19T07:55:06.506Z</published>
    <updated>2022-07-19T09:46:51.519Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、黑盒测试"><a href="#1、黑盒测试" class="headerlink" title="1、黑盒测试"></a>1、黑盒测试</h3><p>即测试输入/输出数据，忽略系统内部的结构。直接想到的测试方法是穷举测试数据，但这是无法做到的，所以我们需要最大限度地提高发现的问题数并尽量列出所有可能的测试数据。</p><hr><h3 id="2、白盒测试"><a href="#2、白盒测试" class="headerlink" title="2、白盒测试"></a>2、白盒测试</h3><p>检查系统内部的结构。直接想到的测试方法是穷举测试路径，但这同样是无法实现的，并且即使穷举完，系统也可能还是存在错误，因为有些错误是【天生的问题】，比如，本来程序逻辑就是错的。</p><hr><h3 id="3、测试原则"><a href="#3、测试原则" class="headerlink" title="3、测试原则"></a>3、测试原则</h3><ol><li>测试用例必须对预期输出或结果进行定义：对输入数据及期望的正确输出数据进行精确描述。</li><li>应当彻底检查每个测试的执行结果</li><li>检查程序是否【未做其应该做的】以及【做了其不应该做的】</li><li>避免测试用例用完即弃</li><li>错误总是倾向于聚集存在</li></ol><hr><h3 id="4、人工测试方法"><a href="#4、人工测试方法" class="headerlink" title="4、人工测试方法"></a>4、人工测试方法</h3><p>a、代码检查<br>b、代码走查<br>【修改程序后，除了回归测试之外，还要进行人工测试】</p><hr><h3 id="5、代码审查"><a href="#5、代码审查" class="headerlink" title="5、代码审查"></a>5、代码审查</h3><p>一个代码检查小组通常由4人组成，其中一人发挥协调作用。协调人不能是该程序的编码人员。<br>协调人的职责：<br>1、为代码检查分发材料、安排进程。<br>2、在代码检查中起主导作用。<br>3、记录发现的所有错误。<br>4、确保所有错误随后得到改正。</p><p>小组中的第二个成员是该程序的编码人员。<br>小组中的其他成员是其他开发人员以及一名测试专家。</p><p>review主要进行两项活动：<br>1、该代码的开发人员讲述逻辑结构，其他人提问找错。<br>2、对着历来常见的编码错误列表分析程序。</p><hr><h3 id="6、错误列表"><a href="#6、错误列表" class="headerlink" title="6、错误列表"></a>6、错误列表</h3><p>1、数据引用错误：引用变量未赋值或初始化、数组越界问题、数组下标是否整数、内存单元是否分配、继承需求是否都在实现类中得到满足</p><p>2、数据声明错误：所有变量是否均已声明、默认属性是否被正确理解、变量的长度及数据类型</p><p>3、运算错误</p><p>4、比较错误</p><p>5、控制流程错误：循环是否终止、模块或子程序是否终止、是否存在不能穷尽的判断</p><p>6、接口错误：形参数等于实参数、形参与实参的顺序、属性</p><p>7、输入/输出错误</p><p>8、其他检查：是否遗漏了某个功能</p><hr><h3 id="7、代码走查"><a href="#7、代码走查" class="headerlink" title="7、代码走查"></a>7、代码走查</h3><p>代码走查小组由3-5人组成，其中一个人为协调人，一人担任秘书，一人担任测试人员。</p><p>在会议期间，每个测试用例都在人们脑中进行推演。也就是说，把测试数据沿程序的逻辑结构走一遍。程序的状态（如变量的值）记录在纸张或白板上以供监视。</p><p>这些测试用例必须结构简单、数量较少，其作用是提供了启动代码走查和质疑程序员逻辑思路及其设想的手段。</p><hr><h3 id="7、桌面检查"><a href="#7、桌面检查" class="headerlink" title="7、桌面检查"></a>7、桌面检查</h3><p>由单人完成：一人阅读程序，对照错误列表检查程序，对程序推演测试数据。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、黑盒测试&quot;&gt;&lt;a href=&quot;#1、黑盒测试&quot; class=&quot;headerlink&quot; title=&quot;1、黑盒测试&quot;&gt;&lt;/a&gt;1、黑盒测试&lt;/h3&gt;&lt;p&gt;即测试输入/输出数据，忽略系统内部的结构。直接想到的测试方法是穷举测试数据，但这是无法做到的，所以我们需要最</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习12-进程管理</title>
    <link href="http://example.com/2022/07/18/py_day26/"/>
    <id>http://example.com/2022/07/18/py_day26/</id>
    <published>2022-07-18T08:36:50.265Z</published>
    <updated>2022-07-19T02:43:43.897Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p>1.1 在linux中，每个执行的程序都称为一个进程。每一个进程都分配一个ID号（pid，进程号）</p><p>1.2 每个进程都可能以两种方式存在，前台与后台，前台进程就是用户目前的屏幕上进行操作的，后台进程则是实际在操作，但由于屏幕上无法看到的进程，通常使用后台方式执行</p><p>1.3 一般系统的服务都是以后台进程的方式存在，而且会常驻在系统中。直到关机才结束</p><hr><h3 id="2、显示系统执行的进程"><a href="#2、显示系统执行的进程" class="headerlink" title="2、显示系统执行的进程"></a>2、显示系统执行的进程</h3><p>基本介绍：ps命令是用来查看目前系统中，有哪些正在执行，以及它们执行的状况。可以不加任何参数</p><p>ps -a：显示当前终端的所有进程信息<br>ps -u：以用户的格式显示进程信息<br>ps -x：显示后台进程运行的参数</p><p>ps详解<br>指令：ps -aux | grep xxx<br>说明：<br>System V展示风格<br>USER：用户名称<br>PID：进程号<br>%CPU：进程占用CPU的百分比<br>%MEM：进程占用物理内存的百分比<br>VSZ：进程占用的虚拟内存大小（单位：KB）<br>RSS：进程占用的物理内存大小（单位：KB）<br>TT：终端名称<br>COMMAND：启动进程所用的命令和参数，如果过长会被截断显示</p><hr><h3 id="3、父子进程"><a href="#3、父子进程" class="headerlink" title="3、父子进程"></a>3、父子进程</h3><p>以全格式显示当前所有的进程，查看进程的父进程：ps -ef<br>-e 显示所有进程<br>-f 全格式</p><hr><h3 id="3、终止进程"><a href="#3、终止进程" class="headerlink" title="3、终止进程"></a>3、终止进程</h3><p>基本语法：kill [选项] 进程号 （功能描述：通过进程号杀死进程）<br>                  killall 进程名称 （功能描述：通过进程名称杀死进程，也支持通配符，这在系统因负载过大而变得很慢时很有用）</p><hr><h3 id="4、服务管理"><a href="#4、服务管理" class="headerlink" title="4、服务管理"></a>4、服务管理</h3><p>介绍：服务（service）本质就是进程，但是是运行在后台的，通常都会监听某个端口，等待其他程序的请求，比如（mysql，sshd，防火墙等），因此我们又称为守护进程。</p><p>service管理指令</p><ol><li>service 服务名 [start| stop | restart | reload | status]</li><li>在centOS7.0后，很多服务不再使用service，而是 systemctl</li><li>service指令管理的服务在 /etc/init.d 查看</li></ol><p> 服务的运行级别（runlevel）：常用级别是3和5<br> 0：系统停机状态，系统默认运行级别不能设为0，否则不能正常启动<br> 1：单用户工作状态，root权限，用于系统维护，禁止远程登录<br> 2：多用户状态（没有NFS），不支持网络<br> 3：完全的的多用户状态（有NFS），登录后进入控制台命令行模式<br> 4：系统未使用，保留<br> 5：X11控制台，登录后进入图形GUI模式<br> 6：系统正常关闭并重启，默认运行级别不能设为6，否则不能正常启动</p><p> chkconfig指令：<br>     介绍：1、通过chkconfig可以给服务的各个运行级别设置  自 启动/关闭<br>                2、chkconfig指令管理的服务在 /etc/init.d 查看<br>               3、centOS7.0后，很多服务使用systemctl管理</p><p>   基本语法：<br>         查看服务 chkconfig –list [ | grep xxx]<br>         chkconfig 服务名 –list<br>         chkconfig –level 5 服务名 on/off</p><p> systemctl指令：<br>    基本语法：systemctl [start | stop | restart | status] 服务名<br>    systemctl指令管理的服务在 /usr/lib/systemd/system 查看</p><hr><h3 id="5、动态监控进程"><a href="#5、动态监控进程" class="headerlink" title="5、动态监控进程"></a>5、动态监控进程</h3><p>介绍：top与ps命令很相似，都是用来显示正在执行的进程。但top在执行一段时间内可以更新正在运行的进程</p><p>基本语法：top [选项]</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、基本介绍&quot;&gt;&lt;a href=&quot;#1、基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1、基本介绍&quot;&gt;&lt;/a&gt;1、基本介绍&lt;/h3&gt;&lt;p&gt;1.1 在linux中，每个执行的程序都称为一个进程。每一个进程都分配一个ID号（pid，进程号）&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习11-网络配置</title>
    <link href="http://example.com/2022/07/18/py_day25/"/>
    <id>http://example.com/2022/07/18/py_day25/</id>
    <published>2022-07-18T03:50:22.997Z</published>
    <updated>2022-07-18T08:13:24.815Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、查看网络ip和网关"><a href="#1、查看网络ip和网关" class="headerlink" title="1、查看网络ip和网关"></a>1、查看网络ip和网关</h3><p>windows下：ipconfig<br>linux下：ifconfig</p><hr><h3 id="2、ping-测试主机之间网络连通性"><a href="#2、ping-测试主机之间网络连通性" class="headerlink" title="2、ping 测试主机之间网络连通性"></a>2、ping 测试主机之间网络连通性</h3><p>基本语法：ping 目的主机（功能描述：测试当前服务器是否可以连接目的主机）</p><hr><h3 id="3、网络环境配置"><a href="#3、网络环境配置" class="headerlink" title="3、网络环境配置"></a>3、网络环境配置</h3><p>第一种方法（自动获取）：<br>说明：登录后，通过界面来设置自动获取ip<br>特点：linux启动后会自动获取ip，优点是能够避免ip冲突，缺点是每次自动获取的ip地址可能不一样</p><p>第二种方法（指定ip）：<br>说明：直接修改配置文件来指定ip，并可以连接到外网（推荐）<br>编辑 vi/etc/sysconfig/network-scripts/ifcfg-ens33<br>要求：将ip地址配置成静态的，比如：ip地址为192.168.200.130</p><p>ifcfg-ens33文件说明<br>DEVICE=eth0            #接口名（设备，网卡）<br>HWADDR=00:0C:2x:6x:0x:xx      #MAC地址<br>TYPE=Ethernet            #网络类型（通常是Ethernet）<br>UUID=926a57ba-92c6-4231-bacb-f27e5e6a9f44            #随机id<br>#系统启动的时候网络接口是否有效（yes/no）<br>ONBOOT=yes<br>#IP的配置方法[none|static|bootp|dhcp] （引导时不使用协议|静态分配IP|BOOTP协议|DHCP协议）<br>BOOTPROTO=static<br>#IP地址<br>IPADDR=192.168.200.130<br>#网关<br>GATEWAY=192.168.200.2<br>#域名解析器<br>DNS1=192.168.200.2</p><p>重启网络服务或者重启系统使配置生效<br>service network restart<br>reboot</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、查看网络ip和网关&quot;&gt;&lt;a href=&quot;#1、查看网络ip和网关&quot; class=&quot;headerlink&quot; title=&quot;1、查看网络ip和网关&quot;&gt;&lt;/a&gt;1、查看网络ip和网关&lt;/h3&gt;&lt;p&gt;windows下：ipconfig&lt;br&gt;linux下：ifconf</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习10-磁盘分区、挂载</title>
    <link href="http://example.com/2022/07/18/py_day24/"/>
    <id>http://example.com/2022/07/18/py_day24/</id>
    <published>2022-07-18T02:16:36.413Z</published>
    <updated>2022-07-18T03:06:03.192Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、linux分区"><a href="#1、linux分区" class="headerlink" title="1、linux分区"></a>1、linux分区</h3><p>原理介绍：</p><p>1.1 对linux来说无论有几个分区，分给哪一个目录使用，它归根结底就只有一个根目录，一个独立且唯一的文件结构，linux中每个分区都是用来组成整个文件系统的一部分</p><p>1.2 linux采用了一种叫“载入”的处理方法，它的整个文件系统中包含了一整套的文件和目录，且将一个分区和一个目录联系起来。这时要载入的一个分区将使它的存储空间在一个目录下获得</p><p>硬盘说明：</p><p>1.3 linux硬盘分为IDE硬盘和SCSI硬盘，目前基本上是SCSI硬盘</p><p>1.4 对于IDE硬盘，驱动器标识符为 “hdx<del>”，其中 “hd” 表明分区所在设备的类型，这里是指IDE硬盘。“x” 为盘号（a为基本盘，b为基本从属盘，c为辅助主盘，d为辅助从属盘），“</del>”代表分区，前四个分区用数字1到4表示，他们是主分区或扩展分区，从5开始是逻辑分区。例，hda3表示为第一个IDE硬盘上的第三个主分区或扩展分区，hdb2表示为第二个IDE硬盘上的第二个主分区或扩展分区。</p><p>1.5 对于SCSI硬盘则标识为 “sdx~”，SCSI硬盘是用 “sd” 来表示分区所在设备的类型的，其余则和IDE硬盘的表示方法一样。</p><p>查看所有设备挂载情况：</p><p>命令：lsblk 或者 lsblk -f</p><p>挂载与自动挂载：</p><p>命令行的挂载行为是临时的，永久挂载要通过修改/etc/fstab实现。</p><hr><h3 id="2、磁盘情况查询"><a href="#2、磁盘情况查询" class="headerlink" title="2、磁盘情况查询"></a>2、磁盘情况查询</h3><p>命令：df -h</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、linux分区&quot;&gt;&lt;a href=&quot;#1、linux分区&quot; class=&quot;headerlink&quot; title=&quot;1、linux分区&quot;&gt;&lt;/a&gt;1、linux分区&lt;/h3&gt;&lt;p&gt;原理介绍：&lt;/p&gt;
&lt;p&gt;1.1 对linux来说无论有几个分区，分给哪一个目录使用</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习9-任务调度</title>
    <link href="http://example.com/2022/07/06/py_day23/"/>
    <id>http://example.com/2022/07/06/py_day23/</id>
    <published>2022-07-06T06:28:42.412Z</published>
    <updated>2022-07-08T08:09:56.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、crond任务调度（crond是一个守护进程，crontab是一个指令）"><a href="#1、crond任务调度（crond是一个守护进程，crontab是一个指令）" class="headerlink" title="1、crond任务调度（crond是一个守护进程，crontab是一个指令）"></a>1、crond任务调度（crond是一个守护进程，crontab是一个指令）</h3><p>crontab 进行 定时任务的设置<br><img src="./images/3.png" alt="enter description here"></p><p>概述<br>任务调度：是指系统在某个时间执行的特定的命令或程序。<br>任务调度分类：1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等<br>                          2.个别用户工作：个别用户可能希望执行某些程序，如对mysql数据库地备份</p><p>基本语法：<br>crontab [选项]<br>常用选项：<br>-e：编辑crontab定时任务<br>-l：查询crontab任务<br>-r：删除当前用户所有地crontab任务</p><p>用法：<br>1.设置任务调度文件：/etc/crontab<br>2.设置个人任务调度。执行cromtab -e命令<br>3.接着输入任务到调度文件<br>【* /1 * * * * ls -l /etc/ &gt; /tmp/to.txt】每小时的每分钟执行 ls -l /etc/ &gt; tmp/to.txt命令<br>【* /1 * * * * /home/mycal】 每小时的每分钟执行脚本文件</p><p>参数细节说明<br><img src="https://github.com/zhouyu19970212/photo/blob/master/2.png" alt="imge"><br>“ */1 ”代表每隔一分钟执行一次。<br>【分时天月星期几】</p><p>特殊符号说明：<br><img src="./images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91_20220707153011.jpg" alt="enter description here"></p><hr><h3 id="2、at任务调度"><a href="#2、at任务调度" class="headerlink" title="2、at任务调度"></a>2、at任务调度</h3><p>基本介绍：</p><ol><li>at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行。</li><li>默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</li><li>at命令是一次性定时计划任务，执行完一个任务后就不再执行了。</li><li>在使用at命令的时候，一定要保证atd进行的启动，可以使用相关指令来查看【ps -ef】。<br><img src="./images/4.png" alt="enter description here"></li></ol><p> at命令格式：<br> at 【选项】【时间】<br> Ctrl+D 结束at命令输入</p><p> at命令选项：<br> <img src="./images/5.png" alt="enter description here"></p><p> at时间定义：【at指定时间的方法】<br> <img src="./images/6.png" alt="enter description here"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、crond任务调度（crond是一个守护进程，crontab是一个指令）&quot;&gt;&lt;a href=&quot;#1、crond任务调度（crond是一个守护进程，crontab是一个指令）&quot; class=&quot;headerlink&quot; title=&quot;1、crond任务调度（cron</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习8-rwx权限</title>
    <link href="http://example.com/2022/07/06/py_day22/"/>
    <id>http://example.com/2022/07/06/py_day22/</id>
    <published>2022-07-06T02:33:50.559Z</published>
    <updated>2022-07-07T07:24:53.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、权限的基本介绍"><a href="#1、权限的基本介绍" class="headerlink" title="1、权限的基本介绍"></a>1、权限的基本介绍</h3><p>ls -l中显示的内容中有这么一行：<br>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc</p><p>0-9位说明</p><ol><li>第0位确定文件类型（d，-，l，c，b）<pre><code>l是链接，相当于windows的快捷方式d是目录，相当于windows的文件夹c是字符设备文件，鼠标，键盘b是块设备，比如硬盘</code></pre></li><li>第1-3位确定所有者（该文件的所有者）拥有该文件的权限。 —User</li><li>第4-6位确定所属组（同用户组的）拥有该文件的权限。 —Group</li><li>第7-9位确定其他用户拥有该文件的权限。 —Other</li></ol><hr><h3 id="2、rwx作用到文件"><a href="#2、rwx作用到文件" class="headerlink" title="2、rwx作用到文件"></a>2、rwx作用到文件</h3><p>[ r ] 代表可读read<br>[ w ] 代表可写write<br>[ x ] 代表可执行execute</p><p>实际案例：<br>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc<br>10个字符确定不同用户能对文件干什么<br>第一个字符代表文件类型为普通文件<br>其余字符三个一组（rwx）<br>第一组rwx：文件拥有者的权限是读、写和执行<br>第二组rw-：与文件拥有者同一组的用户的权限是读、写但不能执行<br>第三组r–：其他不同组的用户权限是只读</p><p>其他说明：<br>1 文件：硬连接数  或 目录：子目录数<br>第一个root 用户<br>第二个root 组<br>1213 文件大小(字节)，如果是文件夹，显示4096字节<br>Feb 2 09:39 最后修改日期<br>abc 文件名</p><hr><h3 id="3、修改文件-目录权限"><a href="#3、修改文件-目录权限" class="headerlink" title="3、修改文件/目录权限"></a>3、修改文件/目录权限</h3><p>通过chmod指令，可以修改文件或者目录的权限。</p><p>第一种方式：+、-、=变更权限<br>u：所有者<br>g：所有组<br>o：其他人<br>a：所有人（u、g、o的总和）<br>1）chmod u=rwx,g=rx,o=x 文件名/目录名<br>2) chmod o+w 文件/目录名<br>3)  chmod a-x 文件名/目录名</p><p>第二种方式：通过数字变更权限<br>r=4<br>w=2<br>x=1<br>rwx=4+2+1=7<br>chmod u=rwx,g=rx,o=x 文件目录名 ==&gt; 相当于  chmod 751 文件目录名</p><hr><h3 id="4、修改文件所有者"><a href="#4、修改文件所有者" class="headerlink" title="4、修改文件所有者"></a>4、修改文件所有者</h3><p>chown newowner 文件/目录 改变所有者<br>chown newowner:newgroup 文件/目录 改变所有者和所在组<br>-R 如果是目录 则使其下所有子文件或目录递归生效</p><hr><h3 id="5、修改文件-目录所在组"><a href="#5、修改文件-目录所在组" class="headerlink" title="5、修改文件/目录所在组"></a>5、修改文件/目录所在组</h3><p>chgrp newgroup 文件/目录  【改变所在组】</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、权限的基本介绍&quot;&gt;&lt;a href=&quot;#1、权限的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1、权限的基本介绍&quot;&gt;&lt;/a&gt;1、权限的基本介绍&lt;/h3&gt;&lt;p&gt;ls -l中显示的内容中有这么一行：&lt;br&gt;-rwxrw-r– 1 root roo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习7-权限管理</title>
    <link href="http://example.com/2022/07/06/py_day21/"/>
    <id>http://example.com/2022/07/06/py_day21/</id>
    <published>2022-07-06T01:45:42.450Z</published>
    <updated>2022-07-06T02:28:33.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、组"><a href="#1、组" class="headerlink" title="1、组"></a>1、组</h3><p>在linux中的每一个用户必须属于一个组，不能独立于组外。<br>在linux中每个文件有所有者、所在组、其他组。</p><hr><h3 id="2、文件-目录-所有者"><a href="#2、文件-目录-所有者" class="headerlink" title="2、文件/目录 所有者"></a>2、文件/目录 所有者</h3><p>一般为文件的创建者，谁创建了文件，就自然成为该文件的所有者。</p><p>查看文件的所有者<br>指令：ls -ahl</p><p>修改文件所有者<br>指令：chown 用户名 文件名</p><hr><h3 id="3、组的创建"><a href="#3、组的创建" class="headerlink" title="3、组的创建"></a>3、组的创建</h3><p>基本指令：groupadd 组名</p><hr><h3 id="4、所在组"><a href="#4、所在组" class="headerlink" title="4、所在组"></a>4、所在组</h3><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组。</p><p>查看文件/目录所在组<br>基本指令：ls -ahl</p><p>修改文件所在组<br>基本指令：chgrp 组名 文件名</p><hr><h3 id="5、其他组"><a href="#5、其他组" class="headerlink" title="5、其他组"></a>5、其他组</h3><p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组。</p><hr><h3 id="6、改变用户所在组"><a href="#6、改变用户所在组" class="headerlink" title="6、改变用户所在组"></a>6、改变用户所在组</h3><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在组。</p><p>改变用户所在组<br>usermod -g 新组名 用户名<br>usermod -d 目录名 用户名 改变该用户登录的初始目录 【用户需要有进入到新目录的权限】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、组&quot;&gt;&lt;a href=&quot;#1、组&quot; class=&quot;headerlink&quot; title=&quot;1、组&quot;&gt;&lt;/a&gt;1、组&lt;/h3&gt;&lt;p&gt;在linux中的每一个用户必须属于一个组，不能独立于组外。&lt;br&gt;在linux中每个文件有所有者、所在组、其他组。&lt;/p&gt;
&lt;hr&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习6-实用指令</title>
    <link href="http://example.com/2022/07/04/py_day20/"/>
    <id>http://example.com/2022/07/04/py_day20/</id>
    <published>2022-07-04T02:11:46.153Z</published>
    <updated>2022-07-05T03:21:43.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、运行级别"><a href="#1、运行级别" class="headerlink" title="1、运行级别"></a>1、运行级别</h3><p>0：关机<br>1：单用户【找回丢失密码】<br>2：多用户状态没有网络服务<br>3：多用户状态有网络服务<br>4：系统未使用保留给用户<br>5：图形界面<br>6：系统重启</p><p>常用运行级别是3和5，也可以指定默认运行级别。</p><p>切换运行级别命令：init [0 1 2 3 4 5 6]</p><hr><h3 id="2、帮助指令"><a href="#2、帮助指令" class="headerlink" title="2、帮助指令"></a>2、帮助指令</h3><p>man/help</p><hr><h3 id="3、文件目录指令"><a href="#3、文件目录指令" class="headerlink" title="3、文件目录指令"></a>3、文件目录指令</h3><p>pwd指令<br>基本语法：pwd 【功能描述：显示当前工作目录的绝对路径】</p><p>ls指令<br>基本语法：ls [选项] [目录或是文件]<br>常用选项：<br>-a：显示当前目录所有文件的文件何目录，包括隐藏的。<br>-l：以单列列表的方式显示信息。</p><p>cd指令<br>基本语法：cd [参数] 【功能描述：切换到指定目录】<br>理解：绝对路径何相对路径<br>cd ~或者cd：回到自己的家目录<br>cd ..：回到当前目录的上一级目录</p><p>mkdir指令<br>用于创建目录<br>基本语法：mkdir [选项] 要创建的目录<br>常用选项：<br>-p：创建多级目录</p><p>rmdir指令<br>用于删除目录<br>基本语法：rmdir [选项] 要删除的空目录 【这样做删除的是空目录，如果目录下有内容无法删除】<br>删除非空目录需要使用指令： rm -rf 要删除的目录。比如：rm -rf /home/animal</p><p>touch指令<br>创建一个空文件<br>基本语法：touch 文件名称<br>比如：touch hello.txt</p><p>cp指令<br>拷贝文件到指定目录<br>基本语法：cp [选项] source dest<br>常用选项：<br>-r 【递归复制整个文件夹】【强制覆盖不提示的方法：\cp，\cp -r /home/bbb/opt】</p><p>rm指令<br>移除文件或目录<br>基本语法：rm [选项] 要删除的文件或目录<br>常用选项：<br>-r：递归删除整个文件夹<br>-f：强制删除不提示</p><p>mv指令<br>移动文件与目录/重命名<br>基本语法：<br>mv oldNameFile newNameFile (功能描述：重命名)<br>mv /temp/movefile /targetFolder (功能描述：移动文件)</p><p>cat指令<br>查看文件内容<br>基本语法：cat [选项] 要查看的文件<br>常用选项：-n 【显示行号】<br>【cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上管道命令 |more [进行交互]】</p><p>more指令<br>这是一个基于VI编辑器的文本过滤器，以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键。<br>基本语法：more 要查看的文件</p><p>less指令<br>用来分屏查看文件内容，功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令再显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。<br>基本语法：less 要查看的文件</p><p>echo指令<br>输出内容到控制台<br>基本语法：echo [选项] [输出内容]</p><p>head指令<br>用于显示文件的开头部分，默认情况下head指令显示文件的前10行内容。<br>基本语法：head 文件 (功能描述：查看文件头10行内容)<br>                  head -n 5 文件 (功能描述：查看文件头5行内容)</p><p>tail指令<br>用于显示文件的尾部，默认情况下tail指令显示文件的后10行内容。<br>基本语法：tail 文件 (功能描述：查看文件尾10行内容)<br>                  tail -n 5 文件 (功能描述：查看文件尾5行内容)<br>                  tail -f 文件 (功能描述：实时追踪该文档的所有更新)</p><p>/&gt;指令 和 &gt;&gt; 指令<br>/&gt; 输出重定向（覆盖写）<br>/&gt;&gt; 追加<br>基本语法：<br>ls -l &gt; 文件 (功能描述：列表的内容写入文件中（覆盖写）)<br>ls -al &gt;&gt; 文件 (功能描述：列表的内容追加到文件的末尾)<br>cat 文件1 &gt; 文件2 (功能描述：将文件1的内容覆盖到文件2)<br>echo “内容” &gt;&gt; 文件</p><p>ln指令<br>软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径<br>基本语法：ln -s [原文件或目录] [软链接名] (功能描述：给原文件创建一个软链接)<br>【删除软链接用 -rm】</p><p>history指令<br>查看已经执行过的历史命令，也可以执行历史指令。<br>基本语法：history (功能描述：查看已经执行过的历史命令)<br>                  history 10 (功能描述：查看最近执行的10个命令)</p><hr><h3 id="4、时间日期类指令"><a href="#4、时间日期类指令" class="headerlink" title="4、时间日期类指令"></a>4、时间日期类指令</h3><p>date指令<br>显示当前日期<br>基本语法：<br>date (功能描述：显示当前时间)<br>date +%Y (功能描述：显示当前年份)<br>date +%m (功能描述：显示当前月份)<br>date +%d (功能描述：显示当前是哪一天)<br>date “+%Y-%m-%d %H:%M:%S” (功能描述：显示年月日时分秒)</p><p>设置日期<br>基本语法：date -s 字符串时间 【比如：date -s “2022-07-05 10:07:35”】</p><p>cal指令<br>查看日历<br>基本语法：cal [选项] (功能描述：不加选项，显示本月日历)</p><hr><h3 id="5、搜素和查找类指令"><a href="#5、搜素和查找类指令" class="headerlink" title="5、搜素和查找类指令"></a>5、搜素和查找类指令</h3><p>find指令<br>从指定目录向下递归地遍历其各个子目录，将满足条件地文件或者目录显示在终端。<br>基本语法：find [搜索范围] [选项]<br>选项说明：<br>-name&lt;查询方式&gt;：按照指定的文件名查找模式查找文件<br>-user&lt;用户名&gt;：查找属于指定用户名所有文件<br>-size&lt;文件大小&gt;：按照指定的文件大小查找文件<br>比如：查找整个linux系统下大于200M的文件（+n大于 -n小于 n等于， 单位有k,M,G）<br>            find / -size +200<br>           按文件名，根据名称查找/home目录下的hello.txt文件<br>           find /home -name hello.txt</p><p>locate指令<br>可以快速定位文件的路径。locate指令利用事先建立的系统中所有文件名称以及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。<br>基本语法：locate 搜索文件<br>【由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库】<br>【没有locate数据库，可以使用指令 yum -y install mlocate 安装】</p><p>grep指令和管道符 |<br>grep过滤查找，管道符 “|” 表示将前一个命令的处理结果输出传递给后面的命令处理。<br>基本语法：grep [选项] 查找内容 源文件<br>常用选项：<br>-n：显示匹配行及行号。<br>-i：忽略字母大小写。<br>比如：在hello.txt文件中，查找“yes”所在行，并显示行号<br>写法1：cat /home/hello.txt | grep -n “yes”<br>写法2：grep -n “yes” /home/hello.txt</p><hr><h3 id="6、压缩和解压类指令"><a href="#6、压缩和解压类指令" class="headerlink" title="6、压缩和解压类指令"></a>6、压缩和解压类指令</h3><p>gzip/gunzip指令<br>gzip用于压缩文件，gunzip用于解压文件。<br>基本语法：<br>gzip 文件 (功能描述：压缩文件，只能将文件压缩为*.gz文件)<br>gunzip 文件 (功能描述：解压缩文件命令)</p><p>zip/unzip指令<br>zip用于压缩文件，unzip用于解压文件，这个在项目打包发布中很有用。<br>基本语法：<br>zip [选项] xxx.zip 将要压缩的内容 (功能描述：压缩文件和目录的命令)<br>unzip [选项] xxx.zip (功能描述：解压缩文件)<br>zip常用选项：<br>-r：递归压缩，即压缩目录<br>比如：将/home下的所有文件/文件夹进行压缩，压缩成myhome.zip<br>zip -r myhome.zip /home/</p><p>tar指令<br>打包。<br>基本语法：tar [选项] xxx.tar.gz 打包的内容 (功能描述：打包目录，压缩后的文件格式.tar.gz)<br>选项说明：<br>-c：新建打包文件<br>-v：显示详细信息<br>-f：指定压缩后的文件名<br>-z：打包同时压缩<br>-x：解包.tar文件<br>一般组合：tar -zcvf</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、运行级别&quot;&gt;&lt;a href=&quot;#1、运行级别&quot; class=&quot;headerlink&quot; title=&quot;1、运行级别&quot;&gt;&lt;/a&gt;1、运行级别&lt;/h3&gt;&lt;p&gt;0：关机&lt;br&gt;1：单用户【找回丢失密码】&lt;br&gt;2：多用户状态没有网络服务&lt;br&gt;3：多用户状态有网络服务</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习6-用户管理</title>
    <link href="http://example.com/2022/07/03/py_day19/"/>
    <id>http://example.com/2022/07/03/py_day19/</id>
    <published>2022-07-03T03:50:12.833Z</published>
    <updated>2022-07-04T02:11:34.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、添加用户-删除用户"><a href="#1、添加用户-删除用户" class="headerlink" title="1、添加用户/删除用户"></a>1、添加用户/删除用户</h3><p>添加用户基本语法：useradd 用户名<br>删除用户基本语法：userdel 用户名</p><hr><h3 id="2、指定-修改密码"><a href="#2、指定-修改密码" class="headerlink" title="2、指定/修改密码"></a>2、指定/修改密码</h3><p>基本语法：<br>password 用户名</p><hr><h3 id="3、查询用户信息-切换用户-查看当前用户"><a href="#3、查询用户信息-切换用户-查看当前用户" class="headerlink" title="3、查询用户信息/切换用户/查看当前用户"></a>3、查询用户信息/切换用户/查看当前用户</h3><p>基本语法：<br>id 用户名</p><p>基本语法：<br>su - 用户名<br>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。当需要返回到原来用户时，使用exit/logout指令。</p><p>基本语法：<br>whoami</p><hr><h3 id="4、用户组"><a href="#4、用户组" class="headerlink" title="4、用户组"></a>4、用户组</h3><p>添加<br>基本语法：groupadd 组名</p><p>删除<br>基本语法：groupdel 组名</p><p>增加用户时直接上组<br>基本语法：useradd -g 用户组 用户名</p><p>修改用户组<br>基本语法：usermod -g 用户组 用户名</p><hr><h3 id="5、用户和组相关文件"><a href="#5、用户和组相关文件" class="headerlink" title="5、用户和组相关文件"></a>5、用户和组相关文件</h3><p>/etc/passwd 文件<br>用户(user)的配置文件，记录用户的各种信息。<br>每行的含义：用户名:口令:用户标识号:组织标识号:注释性描述:主目录:登录shell</p><p>/etc/shadow 文件<br>口令的配置文件。<br>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p><p>/etc/group 文件<br>组(group)配置文件，记录linux包括的组信息。<br>每行含义：组名:口令:组标识符:组内用户列表</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、添加用户-删除用户&quot;&gt;&lt;a href=&quot;#1、添加用户-删除用户&quot; class=&quot;headerlink&quot; title=&quot;1、添加用户/删除用户&quot;&gt;&lt;/a&gt;1、添加用户/删除用户&lt;/h3&gt;&lt;p&gt;添加用户基本语法：useradd 用户名&lt;br&gt;删除用户基本语法：u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习4-vim</title>
    <link href="http://example.com/2022/07/01/py_day18/"/>
    <id>http://example.com/2022/07/01/py_day18/</id>
    <published>2022-07-01T01:53:35.361Z</published>
    <updated>2022-07-03T03:50:03.496Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、常用的三种模式"><a href="#1、常用的三种模式" class="headerlink" title="1、常用的三种模式"></a>1、常用的三种模式</h3><p>a、正常模式<br>以vim打开一个档案就直接进入一般模式了（这是默认的模式）。在这个模式中，可以使用【上下左右】按键来移动光标，可以使用【删除字符】或【删除整行】来处理档案内容，也可以使用【复制、粘贴】来处理你的文件数据。</p><p>b、插入模式<br>按下i，I，o，O，a，A，r，R等任何一个字母之后才会进入编辑模式，一般来说按i即可。</p><p>c、命令行模式<br>顺序输入 “esc” 、 “：” 进入命令行模式。在这个模式当中，可以提供你相关指令。读取、存盘、替换、离开vim、显示行号等动作是在此模式中达成。</p><hr><h3 id="2、各种模式的相互切换"><a href="#2、各种模式的相互切换" class="headerlink" title="2、各种模式的相互切换"></a>2、各种模式的相互切换</h3><p>命令行进入一般模式：vim xxx</p><p>一般模式进入编辑模式：i或a<br>编辑模式进入一般模式：esc<br>一般模式进入命令模式：“：”或者 “ / “<br>命令模式进入一般模式：esc</p><p>命令模式退出到命令行：“ :wq ”（保存退出）、“ :q ”（退出）、“ :q! ”（强制退出，不保存）</p><hr><h3 id="3、快捷键"><a href="#3、快捷键" class="headerlink" title="3、快捷键"></a>3、快捷键</h3><p>1、拷贝当前行 yy，拷贝当前行向下的5行 5yy，并粘贴（输入p）。<br>2、删除当前行 dd，删除当前行向下的5行 5dd。<br>3、在文件中查找某个单词 [命令行向下 /关键字，回车 查找，输入 n 就是查找下一个]</p><p>4、设置文件的行号/取消文件的行号。[命令行下 :set nu 和 :set nonu]<br>5、最末行 [G]，最首行 [gg]。<br>6、撤销动作：[u]。<br>7、快速定位行：[行号 shit+g]。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、常用的三种模式&quot;&gt;&lt;a href=&quot;#1、常用的三种模式&quot; class=&quot;headerlink&quot; title=&quot;1、常用的三种模式&quot;&gt;&lt;/a&gt;1、常用的三种模式&lt;/h3&gt;&lt;p&gt;a、正常模式&lt;br&gt;以vim打开一个档案就直接进入一般模式了（这是默认的模式）。在这</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习3-目录结构</title>
    <link href="http://example.com/2022/06/30/py_day17/"/>
    <id>http://example.com/2022/06/30/py_day17/</id>
    <published>2022-06-30T09:30:30.219Z</published>
    <updated>2022-07-01T01:53:25.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p>linux的文件系统采用的是层级式的树状目录结构，在此结构中的最上层式根目录 “/”，然后在此目录下再创建其他的目录。<strong>在linux世界里，一切皆文件。</strong></p><hr><h3 id="2、具体的目录结构"><a href="#2、具体的目录结构" class="headerlink" title="2、具体的目录结构"></a>2、具体的目录结构</h3><p>/bin 【常用】 （/usr/bin、/usr/local/bin）<br>是Binary的缩写，这个目录存放着最经常使用的命令。</p><p>/sbin （/usr/sbin、/usr/local/sbin）<br>s就是super user的意思，这里存放的是系统管理员使用的系统管理程序。</p><p>/home 【常用】<br>存放普通用户的主目录，在linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名。</p><p>/root 【常用】<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p><p>/lib<br>系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><p>/lost+found<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p>/etc 【常用】<br>所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库 my.conf。</p><p>/usr 【常用】<br>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</p><p>/boot 【常用】<br>存放的是启动linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p>/proc 【不能动】<br>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。</p><p>/srv 【不能动】<br>service缩写，该目录存放一些服务启动之后需要提取的数据。</p><p>/sys 【不能动】<br>这是linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs。</p><p>/tmp<br>这个目录是用来存放一些临时文件的。</p><p>/dev<br>类似于Windows的设备管理器，把所有的硬件用文件的形式存储。</p><p>/media 【常用】<br>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p><p>/mnt 【常用】<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在 /mnt/ 上，<br>然后进入该目录就可以查看里面的内容了。d:/myshare</p><p>/opt<br>这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可以放到该目录下。默认为空。</p><p>/usr/local 【常用】<br>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序。</p><p>/var 【常用】<br>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。</p><p>/selinux [security-enhanced linux]<br>SELinux是一种安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可以自行设置。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、基本介绍&quot;&gt;&lt;a href=&quot;#1、基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1、基本介绍&quot;&gt;&lt;/a&gt;1、基本介绍&lt;/h3&gt;&lt;p&gt;linux的文件系统采用的是层级式的树状目录结构，在此结构中的最上层式根目录 “/”，然后在此目录下再创建其</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习2-虚拟机的克隆、快照、迁移和删除</title>
    <link href="http://example.com/2022/06/30/py_day16/"/>
    <id>http://example.com/2022/06/30/py_day16/</id>
    <published>2022-06-30T08:09:59.968Z</published>
    <updated>2022-06-30T08:57:04.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、虚拟机克隆"><a href="#1、虚拟机克隆" class="headerlink" title="1、虚拟机克隆"></a>1、虚拟机克隆</h3><p>如果已经安装了一台linux操作系统，还想再要更多的，没有必要再重新安装，只需要克隆就可以了。</p><p>方式1：直接拷贝一份安装好的虚拟机文件<br>方式2：使用vmware的克隆操作，克隆时，需要先关闭linux系统</p><hr><h3 id="2、虚拟机快照"><a href="#2、虚拟机快照" class="headerlink" title="2、虚拟机快照"></a>2、虚拟机快照</h3><p>如果再使用虚拟机系统的时候（比如linux），想要回到原先的某一个状态，也就是说你担心可能有些误操作造成系统异常，需要回到原先某个正常的运行状态，vmware也提供了这样的功能，就叫快照管理</p><p>应用实例：<br>1、按照好系统以后，先做一个快照A<br>2、进入到系统。创建一个文件夹，再保存一个快照B<br>3、回到系统刚刚按照好的状态，即 快照A</p><hr><h3 id="3、虚拟机迁移和删除"><a href="#3、虚拟机迁移和删除" class="headerlink" title="3、虚拟机迁移和删除"></a>3、虚拟机迁移和删除</h3><p>虚拟系统安装好了，它的本质就是文件。因此虚拟系统的迁移很方便，可以把安装好的虚拟系统这个文件夹整体<strong>拷贝或者剪切</strong>到另外位置使用。删除也很简单，用vmware进行移除，在点击菜单-&gt;从磁盘删除即可，或者直接手动删除虚拟系统对应的文件夹即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、虚拟机克隆&quot;&gt;&lt;a href=&quot;#1、虚拟机克隆&quot; class=&quot;headerlink&quot; title=&quot;1、虚拟机克隆&quot;&gt;&lt;/a&gt;1、虚拟机克隆&lt;/h3&gt;&lt;p&gt;如果已经安装了一台linux操作系统，还想再要更多的，没有必要再重新安装，只需要克隆就可以了。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>学习14-存储数据</title>
    <link href="http://example.com/2022/06/30/py_day15/"/>
    <id>http://example.com/2022/06/30/py_day15/</id>
    <published>2022-06-30T03:38:21.213Z</published>
    <updated>2022-06-30T03:38:21.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、数据的存取（json格式）"><a href="#1、数据的存取（json格式）" class="headerlink" title="1、数据的存取（json格式）"></a>1、数据的存取（json格式）</h3><h4 id="1-1、写（存）数据-json-dump-文件名-操作类型"><a href="#1-1、写（存）数据-json-dump-文件名-操作类型" class="headerlink" title="1.1、写（存）数据 json.dump(文件名, 操作类型)"></a>1.1、写（存）数据 json.dump(文件名, 操作类型)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line"></span><br><span class="line">filename = &#x27;numbers.json&#x27;</span><br><span class="line">with open(filename, &#x27;w&#x27;) as fObj:</span><br><span class="line">    json.dump(numbers, fObj)</span><br></pre></td></tr></table></figure><h4 id="1-2、读（取）数据-json-load-对象"><a href="#1-2、读（取）数据-json-load-对象" class="headerlink" title="1.2、读（取）数据 json.load(对象)"></a>1.2、读（取）数据 json.load(对象)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line"></span><br><span class="line">filename = &#x27;numbers.json&#x27;</span><br><span class="line">with open(filename) as fObj:</span><br><span class="line">    numbers = json.load(fObj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure><p>例子1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">filename = &#x27;username.json&#x27;</span><br><span class="line">try:</span><br><span class="line">    with open(filename) as fObj:</span><br><span class="line">        username = json.load(fObj)</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    username = input(&quot;What is your name? &quot;)</span><br><span class="line">    with open(filename, &#x27;w&#x27;) as fObj:</span><br><span class="line">        json.dump(username, fObj)</span><br><span class="line">        print(&quot;We will remember you when you come back, &quot; + username + &quot;!&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;Welcome back, &quot; + username + &quot;!&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、数据的存取（json格式）&quot;&gt;&lt;a href=&quot;#1、数据的存取（json格式）&quot; class=&quot;headerlink&quot; title=&quot;1、数据的存取（json格式）&quot;&gt;&lt;/a&gt;1、数据的存取（json格式）&lt;/h3&gt;&lt;h4 id=&quot;1-1、写（存）数据-js</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习14-存储数据</title>
    <link href="http://example.com/2022/06/23/py_day14/"/>
    <id>http://example.com/2022/06/23/py_day14/</id>
    <published>2022-06-23T09:16:43.947Z</published>
    <updated>2022-06-24T01:14:41.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、数据的存取（json格式）"><a href="#1、数据的存取（json格式）" class="headerlink" title="1、数据的存取（json格式）"></a>1、数据的存取（json格式）</h3><h4 id="1-1、写（存）数据-json-dump-文件名-操作类型"><a href="#1-1、写（存）数据-json-dump-文件名-操作类型" class="headerlink" title="1.1、写（存）数据 json.dump(文件名, 操作类型)"></a>1.1、写（存）数据 json.dump(文件名, 操作类型)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line"></span><br><span class="line">filename = &#x27;numbers.json&#x27;</span><br><span class="line">with open(filename, &#x27;w&#x27;) as fObj:</span><br><span class="line">    json.dump(numbers, fObj)</span><br></pre></td></tr></table></figure><h4 id="1-2、读（取）数据-json-load-对象"><a href="#1-2、读（取）数据-json-load-对象" class="headerlink" title="1.2、读（取）数据 json.load(对象)"></a>1.2、读（取）数据 json.load(对象)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line"></span><br><span class="line">filename = &#x27;numbers.json&#x27;</span><br><span class="line">with open(filename) as fObj:</span><br><span class="line">    numbers = json.load(fObj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure><p>例子1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">filename = &#x27;username.json&#x27;</span><br><span class="line">try:</span><br><span class="line">    with open(filename) as fObj:</span><br><span class="line">        username = json.load(fObj)</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    username = input(&quot;What is your name? &quot;)</span><br><span class="line">    with open(filename, &#x27;w&#x27;) as fObj:</span><br><span class="line">        json.dump(username, fObj)</span><br><span class="line">        print(&quot;We will remember you when you come back, &quot; + username + &quot;!&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;Welcome back, &quot; + username + &quot;!&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、数据的存取（json格式）&quot;&gt;&lt;a href=&quot;#1、数据的存取（json格式）&quot; class=&quot;headerlink&quot; title=&quot;1、数据的存取（json格式）&quot;&gt;&lt;/a&gt;1、数据的存取（json格式）&lt;/h3&gt;&lt;h4 id=&quot;1-1、写（存）数据-js</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习13-异常</title>
    <link href="http://example.com/2022/06/23/py_day13/"/>
    <id>http://example.com/2022/06/23/py_day13/</id>
    <published>2022-06-23T08:24:46.507Z</published>
    <updated>2022-06-23T09:11:44.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、处理异常try-except"><a href="#1、处理异常try-except" class="headerlink" title="1、处理异常try-except"></a>1、处理异常try-except</h3><p>用法：try:<br>        except:<br>        else:</p><p>例子1：try-except模块中代码执行失败则进入except模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(5/0)</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    print(&quot;You can&#x27;t divide by zero!&quot;)</span><br></pre></td></tr></table></figure><p>例子2：try-except模块中代码成功执行则进入else模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Give me two nums, and I will divide them.&quot;)</span><br><span class="line">print(&quot;Enter &#x27;q&#x27; to quit.&quot;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    firstNumber = input(&quot;\nFirst num: &quot;)</span><br><span class="line">    if firstNumber == &#x27;q&#x27;:</span><br><span class="line">        break</span><br><span class="line">    elif not str.isdigit(firstNumber):</span><br><span class="line">        print(&quot;Plz re-input&quot;)</span><br><span class="line">        continue</span><br><span class="line">    secondNumber = input(&quot;\nFirst num: &quot;)</span><br><span class="line">    if secondNumber == &#x27;q&#x27;:</span><br><span class="line">        break</span><br><span class="line">    elif not str.isdigit(secondNumber):</span><br><span class="line">        print(&quot;Plz re-input&quot;)</span><br><span class="line">        continue</span><br><span class="line">    try:</span><br><span class="line">        answer = int(firstNumber) / int(secondNumber)</span><br><span class="line">    except ZeroDivisionError:</span><br><span class="line">        print(&quot;You can&#x27;t divide by 0!&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure><p>例子3：捕获到异常时什么都不做</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;alice.txt&#x27;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    with open(filename) as fObj:</span><br><span class="line">        contents = fObj.read()</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、处理异常try-except&quot;&gt;&lt;a href=&quot;#1、处理异常try-except&quot; class=&quot;headerlink&quot; title=&quot;1、处理异常try-except&quot;&gt;&lt;/a&gt;1、处理异常try-except&lt;/h3&gt;&lt;p&gt;用法：try:&lt;br&gt;   </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习12-文件的读写</title>
    <link href="http://example.com/2022/06/22/py_day12/"/>
    <id>http://example.com/2022/06/22/py_day12/</id>
    <published>2022-06-22T02:37:47.100Z</published>
    <updated>2022-06-23T08:34:11.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、读文件"><a href="#1、读文件" class="headerlink" title="1、读文件"></a>1、读文件</h3><h4 id="1-1、读文件"><a href="#1-1、读文件" class="headerlink" title="1.1、读文件"></a>1.1、读文件</h4><p>用法：with open(‘文件名’) as 别名<br>变量 = 别名.read()<br>print(变量)</p><p>步骤：<br>–&gt; 打开文件，open()。Python在当前执行的文件所在的目录中查找指定的文件。函数open()返回一个表示文件的对象。<br>–&gt; 关闭文件，with()自动关闭文件。<br>–&gt; 读取文件，read()，返回一个字符串存储在变量中。</p><h4 id="1-2、文件路径"><a href="#1-2、文件路径" class="headerlink" title="1.2、文件路径"></a>1.2、文件路径</h4><p>相对路径：<br>linux/OS X：with open(‘text_files/filename.txt’) as file_object: （斜杠）<br>Windows：with open(‘text_files\filename.txt’) as file_object: （反斜杠）<br>绝对路径：<br>linux/OS X：file_path = ‘/home/ehmatthes/other_files/text_files/filename.txt’<br>with open(file_path) as file_object:<br>Windows：file_path = ‘C:\Users\ehmatthes\other_files\text_files\filename.txt’<br>with open(file_path) as file_object:</p><h4 id="1-3、逐行读取"><a href="#1-3、逐行读取" class="headerlink" title="1.3、逐行读取"></a>1.3、逐行读取</h4><p>使用for循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;pi_digits.txt&#x27;</span><br><span class="line"></span><br><span class="line">with open(filename) as fileObject:</span><br><span class="line">    for line in fileObject:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure><h4 id="1-4、使用列表保存文件内容"><a href="#1-4、使用列表保存文件内容" class="headerlink" title="1.4、使用列表保存文件内容"></a>1.4、使用列表保存文件内容</h4><blockquote><p>使用关键字with时， open()返回的文件对象只在with代码块内可用。如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表：你可以立即处理文件的各个部分，也可推迟到程序后面再处理。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;pi_digits.txt&#x27;</span><br><span class="line"></span><br><span class="line">with open(filename) as fileObject:</span><br><span class="line">    lines = fileObject.readlines()</span><br><span class="line"></span><br><span class="line">for line in lines:</span><br><span class="line">    print(line.rstrip())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>readlines()方法返回一个列表，文件各行存储在这这个列表中</strong></p><h4 id="1-5、使用文件的内容"><a href="#1-5、使用文件的内容" class="headerlink" title="1.5、使用文件的内容"></a>1.5、使用文件的内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;pi_digits.txt&#x27;</span><br><span class="line"></span><br><span class="line">with open(filename) as fileObject:</span><br><span class="line">    lines = fileObject.readlines()</span><br><span class="line"></span><br><span class="line">piStr = &#x27;&#x27;</span><br><span class="line">for line in lines:</span><br><span class="line">    piStr += line.strip()</span><br><span class="line"></span><br><span class="line">print(piStr)</span><br><span class="line">print(len(piStr))</span><br></pre></td></tr></table></figure><p><em><strong>读取文本文件时， Python将其中的所有文本都解读为字符串。如果你读取的是数字，并要将其作为数值使用，就必须使用函数int()将其转换为整数，或使用函数float()将其转换为浮点数。</strong></em></p><h3 id="2、写文件"><a href="#2、写文件" class="headerlink" title="2、写文件"></a>2、写文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;programming.txt&#x27;</span><br><span class="line"></span><br><span class="line">with open(filename, &#x27;w&#x27;) as fileObject:</span><br><span class="line">    fileObject.write(&quot;I love programming&quot;)</span><br></pre></td></tr></table></figure><p>open()中第一个参数指要打开文件的名称，第二个参数指以写入的方式打开文件。<br>可指定模式有的：w（写入）、r（读取）、a（附加）、r+（读写）。py默认读取模式打开文件。</p><p><em><strong>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数str()将其转换为字符串格式。</strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、读文件&quot;&gt;&lt;a href=&quot;#1、读文件&quot; class=&quot;headerlink&quot; title=&quot;1、读文件&quot;&gt;&lt;/a&gt;1、读文件&lt;/h3&gt;&lt;h4 id=&quot;1-1、读文件&quot;&gt;&lt;a href=&quot;#1-1、读文件&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习11-继承</title>
    <link href="http://example.com/2022/06/21/py_day11/"/>
    <id>http://example.com/2022/06/21/py_day11/</id>
    <published>2022-06-21T09:12:50.958Z</published>
    <updated>2022-06-22T02:15:44.911Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、子类构造器"><a href="#1、子类构造器" class="headerlink" title="1、子类构造器"></a>1、子类构造器</h3><blockquote><p>创建子类的实例时， Python首先需要完成的任务是给父类的所有属性赋值。为此，子类的方法__init__()需要父类施以援手。</p></blockquote><p>**py的属性是放在构造器里的</p><p>a、创建子类时，父类位于子类前面<br>b、定义子类时，必须在括号内指定父类的名称<br>c、super()引用父类的构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Car():</span><br><span class="line"></span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometerReading = 0</span><br><span class="line"></span><br><span class="line">    def getDescriptiveName(self):</span><br><span class="line">        longName = str(self.year) + &#x27; &#x27; + self.make + &#x27; &#x27; + self.model</span><br><span class="line">        return longName.title()</span><br><span class="line"></span><br><span class="line">    def readOdometer(self):</span><br><span class="line">        print(&quot;This car has &quot; + str(self.odometerReading) + &quot; miles on it.&quot;)</span><br><span class="line"></span><br><span class="line">    def updateOdometer(self, mileage):</span><br><span class="line">        if mileage &gt;= self.odometerReading:</span><br><span class="line">            self.odometerReading = mileage</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;You can&#x27;t roll back an odometer!&quot;)</span><br><span class="line"></span><br><span class="line">    def incrementOdometer(self, miles):</span><br><span class="line">        self.odometerReading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ElectricCar(Car):</span><br><span class="line">    </span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myTesla = ElectricCar(&#x27;tesla&#x27;, &#x27;model s&#x27;, 2016)</span><br><span class="line">print(myTesla.getDescriptiveName())</span><br></pre></td></tr></table></figure><h3 id="2、给子类定义属性和方法"><a href="#2、给子类定义属性和方法" class="headerlink" title="2、给子类定义属性和方法"></a>2、给子类定义属性和方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class ElectricCar(Car):</span><br><span class="line"></span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.batterySize = 70</span><br><span class="line"></span><br><span class="line">    def describeBattery(self):</span><br><span class="line">        print(&quot;This car has a &quot; + str(self.batterySize) + &quot;-kWh battery.&quot;)</span><br><span class="line"></span><br><span class="line">myTesla = ElectricCar(&#x27;tesla&#x27;, &#x27;model s&#x27;, 2016)</span><br><span class="line">print(myTesla.getDescriptiveName())</span><br><span class="line">myTesla.describeBattery()</span><br></pre></td></tr></table></figure><h3 id="3、重写"><a href="#3、重写" class="headerlink" title="3、重写"></a>3、重写</h3><blockquote><p>对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。为此，可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样， Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。</p></blockquote><h3 id="4、将实例用作属性"><a href="#4、将实例用作属性" class="headerlink" title="4、将实例用作属性"></a>4、将实例用作属性</h3><blockquote><p>不断给ElectricCar类添加细节时，我们可能会发现其中包含很多专门针对汽车电瓶的属性和方法。在这种情况下，我们可将这些属性和方法提取出来，放到另一个名为Battery的类中，并将一个Battery实例用作ElectricCar类的一个属性。</p></blockquote><p>***这行代码让Python在实例my_tesla中查找属性battery，并对存储在该属性中的Battery实例调用方法describe_battery()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Battery():</span><br><span class="line"></span><br><span class="line">    def __init__(self, batterySzie =70):</span><br><span class="line">        self.batterySize = batterySzie</span><br><span class="line"></span><br><span class="line">    def describeBattery(self):</span><br><span class="line">        print(&quot;This car has a &quot; + str(self.batterySize) + &quot;-kWh battery.&quot;)</span><br><span class="line"></span><br><span class="line">    def getRange(self):</span><br><span class="line">        if self.batterySize == 70:</span><br><span class="line">            range = 240</span><br><span class="line">        elif self.batterySize == 85:</span><br><span class="line">            range = 270</span><br><span class="line"></span><br><span class="line">        message = &quot;This car can go approximately &quot; + str(range)</span><br><span class="line">        message += &quot; miles on a full charge.&quot;</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ElectricCar(Car):</span><br><span class="line"></span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line">    def describeBattery(self):</span><br><span class="line">        print(&quot;This car has a &quot; + str(self.batterySize) + &quot;-kWh battery.&quot;)</span><br><span class="line"></span><br><span class="line">myTesla = ElectricCar(&#x27;tesla&#x27;, &#x27;model s&#x27;, 2016)</span><br><span class="line">print(myTesla.getDescriptiveName())</span><br><span class="line">myTesla.battery.describeBattery()</span><br><span class="line">myTesla.battery.getRange()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、子类构造器&quot;&gt;&lt;a href=&quot;#1、子类构造器&quot; class=&quot;headerlink&quot; title=&quot;1、子类构造器&quot;&gt;&lt;/a&gt;1、子类构造器&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;创建子类的实例时， Python首先需要完成的任务是给父类的所有属性赋值。</summary>
      
    
    
    
    
  </entry>
  
</feed>
