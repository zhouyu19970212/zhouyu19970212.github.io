<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>小周的博客</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-07-08T08:05:29.376Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>JOJO</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>linux学习9-任务调度</title>
    <link href="http://example.com/2022/07/06/py_day23/"/>
    <id>http://example.com/2022/07/06/py_day23/</id>
    <published>2022-07-06T06:28:42.412Z</published>
    <updated>2022-07-08T08:05:29.376Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、crond任务调度（crond是一个守护进程，crontab是一个指令）"><a href="#1、crond任务调度（crond是一个守护进程，crontab是一个指令）" class="headerlink" title="1、crond任务调度（crond是一个守护进程，crontab是一个指令）"></a>1、crond任务调度（crond是一个守护进程，crontab是一个指令）</h3><p>crontab 进行 定时任务的设置<br><img src="./images/3.png" alt="enter description here"></p><p>概述<br>任务调度：是指系统在某个时间执行的特定的命令或程序。<br>任务调度分类：1.系统工作：有些重要的工作必须周而复始地执行。如病毒扫描等<br>                          2.个别用户工作：个别用户可能希望执行某些程序，如对mysql数据库地备份</p><p>基本语法：<br>crontab [选项]<br>常用选项：<br>-e：编辑crontab定时任务<br>-l：查询crontab任务<br>-r：删除当前用户所有地crontab任务</p><p>用法：<br>1.设置任务调度文件：/etc/crontab<br>2.设置个人任务调度。执行cromtab -e命令<br>3.接着输入任务到调度文件<br>【* /1 * * * * ls -l /etc/ &gt; /tmp/to.txt】每小时的每分钟执行 ls -l /etc/ &gt; tmp/to.txt命令<br>【* /1 * * * * /home/mycal】 每小时的每分钟执行脚本文件</p><p>参数细节说明<br><img src="https://github.com/zhouyu19970212/photo/blob/master/2.png" alt="enter description here"><br>“ */1 ”代表每隔一分钟执行一次。<br>【分时天月星期几】</p><p>特殊符号说明：<br><img src="./images/%E5%BE%AE%E4%BF%A1%E5%9B%BE%E7%89%87%E7%BC%96%E8%BE%91_20220707153011.jpg" alt="enter description here"></p><hr><h3 id="2、at任务调度"><a href="#2、at任务调度" class="headerlink" title="2、at任务调度"></a>2、at任务调度</h3><p>基本介绍：</p><ol><li>at命令是一次性定时计划任务，at的守护进程atd会以后台模式运行，检查作业队列来运行。</li><li>默认情况下，atd守护进程每60秒检查作业队列，有作业时，会检查作业运行时间，如果时间与当前时间匹配，则运行此作业。</li><li>at命令是一次性定时计划任务，执行完一个任务后就不再执行了。</li><li>在使用at命令的时候，一定要保证atd进行的启动，可以使用相关指令来查看【ps -ef】。<br><img src="./images/4.png" alt="enter description here"></li></ol><p> at命令格式：<br> at 【选项】【时间】<br> Ctrl+D 结束at命令输入</p><p> at命令选项：<br> <img src="./images/5.png" alt="enter description here"></p><p> at时间定义：【at指定时间的方法】<br> <img src="./images/6.png" alt="enter description here"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、crond任务调度（crond是一个守护进程，crontab是一个指令）&quot;&gt;&lt;a href=&quot;#1、crond任务调度（crond是一个守护进程，crontab是一个指令）&quot; class=&quot;headerlink&quot; title=&quot;1、crond任务调度（cron</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习8-rwx权限</title>
    <link href="http://example.com/2022/07/06/py_day22/"/>
    <id>http://example.com/2022/07/06/py_day22/</id>
    <published>2022-07-06T02:33:50.559Z</published>
    <updated>2022-07-07T07:24:53.452Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、权限的基本介绍"><a href="#1、权限的基本介绍" class="headerlink" title="1、权限的基本介绍"></a>1、权限的基本介绍</h3><p>ls -l中显示的内容中有这么一行：<br>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc</p><p>0-9位说明</p><ol><li>第0位确定文件类型（d，-，l，c，b）<pre><code>l是链接，相当于windows的快捷方式d是目录，相当于windows的文件夹c是字符设备文件，鼠标，键盘b是块设备，比如硬盘</code></pre></li><li>第1-3位确定所有者（该文件的所有者）拥有该文件的权限。 —User</li><li>第4-6位确定所属组（同用户组的）拥有该文件的权限。 —Group</li><li>第7-9位确定其他用户拥有该文件的权限。 —Other</li></ol><hr><h3 id="2、rwx作用到文件"><a href="#2、rwx作用到文件" class="headerlink" title="2、rwx作用到文件"></a>2、rwx作用到文件</h3><p>[ r ] 代表可读read<br>[ w ] 代表可写write<br>[ x ] 代表可执行execute</p><p>实际案例：<br>-rwxrw-r– 1 root root 1213 Feb 2 09:39 abc<br>10个字符确定不同用户能对文件干什么<br>第一个字符代表文件类型为普通文件<br>其余字符三个一组（rwx）<br>第一组rwx：文件拥有者的权限是读、写和执行<br>第二组rw-：与文件拥有者同一组的用户的权限是读、写但不能执行<br>第三组r–：其他不同组的用户权限是只读</p><p>其他说明：<br>1 文件：硬连接数  或 目录：子目录数<br>第一个root 用户<br>第二个root 组<br>1213 文件大小(字节)，如果是文件夹，显示4096字节<br>Feb 2 09:39 最后修改日期<br>abc 文件名</p><hr><h3 id="3、修改文件-目录权限"><a href="#3、修改文件-目录权限" class="headerlink" title="3、修改文件/目录权限"></a>3、修改文件/目录权限</h3><p>通过chmod指令，可以修改文件或者目录的权限。</p><p>第一种方式：+、-、=变更权限<br>u：所有者<br>g：所有组<br>o：其他人<br>a：所有人（u、g、o的总和）<br>1）chmod u=rwx,g=rx,o=x 文件名/目录名<br>2) chmod o+w 文件/目录名<br>3)  chmod a-x 文件名/目录名</p><p>第二种方式：通过数字变更权限<br>r=4<br>w=2<br>x=1<br>rwx=4+2+1=7<br>chmod u=rwx,g=rx,o=x 文件目录名 ==&gt; 相当于  chmod 751 文件目录名</p><hr><h3 id="4、修改文件所有者"><a href="#4、修改文件所有者" class="headerlink" title="4、修改文件所有者"></a>4、修改文件所有者</h3><p>chown newowner 文件/目录 改变所有者<br>chown newowner:newgroup 文件/目录 改变所有者和所在组<br>-R 如果是目录 则使其下所有子文件或目录递归生效</p><hr><h3 id="5、修改文件-目录所在组"><a href="#5、修改文件-目录所在组" class="headerlink" title="5、修改文件/目录所在组"></a>5、修改文件/目录所在组</h3><p>chgrp newgroup 文件/目录  【改变所在组】</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、权限的基本介绍&quot;&gt;&lt;a href=&quot;#1、权限的基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1、权限的基本介绍&quot;&gt;&lt;/a&gt;1、权限的基本介绍&lt;/h3&gt;&lt;p&gt;ls -l中显示的内容中有这么一行：&lt;br&gt;-rwxrw-r– 1 root roo</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习7-权限管理</title>
    <link href="http://example.com/2022/07/06/py_day21/"/>
    <id>http://example.com/2022/07/06/py_day21/</id>
    <published>2022-07-06T01:45:42.450Z</published>
    <updated>2022-07-06T02:28:33.215Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、组"><a href="#1、组" class="headerlink" title="1、组"></a>1、组</h3><p>在linux中的每一个用户必须属于一个组，不能独立于组外。<br>在linux中每个文件有所有者、所在组、其他组。</p><hr><h3 id="2、文件-目录-所有者"><a href="#2、文件-目录-所有者" class="headerlink" title="2、文件/目录 所有者"></a>2、文件/目录 所有者</h3><p>一般为文件的创建者，谁创建了文件，就自然成为该文件的所有者。</p><p>查看文件的所有者<br>指令：ls -ahl</p><p>修改文件所有者<br>指令：chown 用户名 文件名</p><hr><h3 id="3、组的创建"><a href="#3、组的创建" class="headerlink" title="3、组的创建"></a>3、组的创建</h3><p>基本指令：groupadd 组名</p><hr><h3 id="4、所在组"><a href="#4、所在组" class="headerlink" title="4、所在组"></a>4、所在组</h3><p>当某个用户创建了一个文件后，这个文件的所在组就是该用户所在的组。</p><p>查看文件/目录所在组<br>基本指令：ls -ahl</p><p>修改文件所在组<br>基本指令：chgrp 组名 文件名</p><hr><h3 id="5、其他组"><a href="#5、其他组" class="headerlink" title="5、其他组"></a>5、其他组</h3><p>除文件的所有者和所在组的用户外，系统的其他用户都是文件的其他组。</p><hr><h3 id="6、改变用户所在组"><a href="#6、改变用户所在组" class="headerlink" title="6、改变用户所在组"></a>6、改变用户所在组</h3><p>在添加用户时，可以指定将该用户添加到哪个组中，同样的用root的管理权限可以改变某个用户所在组。</p><p>改变用户所在组<br>usermod -g 新组名 用户名<br>usermod -d 目录名 用户名 改变该用户登录的初始目录 【用户需要有进入到新目录的权限】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、组&quot;&gt;&lt;a href=&quot;#1、组&quot; class=&quot;headerlink&quot; title=&quot;1、组&quot;&gt;&lt;/a&gt;1、组&lt;/h3&gt;&lt;p&gt;在linux中的每一个用户必须属于一个组，不能独立于组外。&lt;br&gt;在linux中每个文件有所有者、所在组、其他组。&lt;/p&gt;
&lt;hr&gt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习6-实用指令</title>
    <link href="http://example.com/2022/07/04/py_day20/"/>
    <id>http://example.com/2022/07/04/py_day20/</id>
    <published>2022-07-04T02:11:46.153Z</published>
    <updated>2022-07-05T03:21:43.630Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、运行级别"><a href="#1、运行级别" class="headerlink" title="1、运行级别"></a>1、运行级别</h3><p>0：关机<br>1：单用户【找回丢失密码】<br>2：多用户状态没有网络服务<br>3：多用户状态有网络服务<br>4：系统未使用保留给用户<br>5：图形界面<br>6：系统重启</p><p>常用运行级别是3和5，也可以指定默认运行级别。</p><p>切换运行级别命令：init [0 1 2 3 4 5 6]</p><hr><h3 id="2、帮助指令"><a href="#2、帮助指令" class="headerlink" title="2、帮助指令"></a>2、帮助指令</h3><p>man/help</p><hr><h3 id="3、文件目录指令"><a href="#3、文件目录指令" class="headerlink" title="3、文件目录指令"></a>3、文件目录指令</h3><p>pwd指令<br>基本语法：pwd 【功能描述：显示当前工作目录的绝对路径】</p><p>ls指令<br>基本语法：ls [选项] [目录或是文件]<br>常用选项：<br>-a：显示当前目录所有文件的文件何目录，包括隐藏的。<br>-l：以单列列表的方式显示信息。</p><p>cd指令<br>基本语法：cd [参数] 【功能描述：切换到指定目录】<br>理解：绝对路径何相对路径<br>cd ~或者cd：回到自己的家目录<br>cd ..：回到当前目录的上一级目录</p><p>mkdir指令<br>用于创建目录<br>基本语法：mkdir [选项] 要创建的目录<br>常用选项：<br>-p：创建多级目录</p><p>rmdir指令<br>用于删除目录<br>基本语法：rmdir [选项] 要删除的空目录 【这样做删除的是空目录，如果目录下有内容无法删除】<br>删除非空目录需要使用指令： rm -rf 要删除的目录。比如：rm -rf /home/animal</p><p>touch指令<br>创建一个空文件<br>基本语法：touch 文件名称<br>比如：touch hello.txt</p><p>cp指令<br>拷贝文件到指定目录<br>基本语法：cp [选项] source dest<br>常用选项：<br>-r 【递归复制整个文件夹】【强制覆盖不提示的方法：\cp，\cp -r /home/bbb/opt】</p><p>rm指令<br>移除文件或目录<br>基本语法：rm [选项] 要删除的文件或目录<br>常用选项：<br>-r：递归删除整个文件夹<br>-f：强制删除不提示</p><p>mv指令<br>移动文件与目录/重命名<br>基本语法：<br>mv oldNameFile newNameFile (功能描述：重命名)<br>mv /temp/movefile /targetFolder (功能描述：移动文件)</p><p>cat指令<br>查看文件内容<br>基本语法：cat [选项] 要查看的文件<br>常用选项：-n 【显示行号】<br>【cat只能浏览文件，而不能修改文件，为了浏览方便，一般会带上管道命令 |more [进行交互]】</p><p>more指令<br>这是一个基于VI编辑器的文本过滤器，以全屏幕的方式按页显示文本文件的内容。more指令中内置了若干快捷键。<br>基本语法：more 要查看的文件</p><p>less指令<br>用来分屏查看文件内容，功能与more指令类似，但是比more指令更加强大，支持各种显示终端。less指令再显示文件内容时，并不是一次将整个文件加载之后才显示，而是根据显示需要加载内容，对于显示大型文件具有较高的效率。<br>基本语法：less 要查看的文件</p><p>echo指令<br>输出内容到控制台<br>基本语法：echo [选项] [输出内容]</p><p>head指令<br>用于显示文件的开头部分，默认情况下head指令显示文件的前10行内容。<br>基本语法：head 文件 (功能描述：查看文件头10行内容)<br>                  head -n 5 文件 (功能描述：查看文件头5行内容)</p><p>tail指令<br>用于显示文件的尾部，默认情况下tail指令显示文件的后10行内容。<br>基本语法：tail 文件 (功能描述：查看文件尾10行内容)<br>                  tail -n 5 文件 (功能描述：查看文件尾5行内容)<br>                  tail -f 文件 (功能描述：实时追踪该文档的所有更新)</p><p>/&gt;指令 和 &gt;&gt; 指令<br>/&gt; 输出重定向（覆盖写）<br>/&gt;&gt; 追加<br>基本语法：<br>ls -l &gt; 文件 (功能描述：列表的内容写入文件中（覆盖写）)<br>ls -al &gt;&gt; 文件 (功能描述：列表的内容追加到文件的末尾)<br>cat 文件1 &gt; 文件2 (功能描述：将文件1的内容覆盖到文件2)<br>echo “内容” &gt;&gt; 文件</p><p>ln指令<br>软链接也称为符号链接，类似于windows里的快捷方式，主要存放了链接其他文件的路径<br>基本语法：ln -s [原文件或目录] [软链接名] (功能描述：给原文件创建一个软链接)<br>【删除软链接用 -rm】</p><p>history指令<br>查看已经执行过的历史命令，也可以执行历史指令。<br>基本语法：history (功能描述：查看已经执行过的历史命令)<br>                  history 10 (功能描述：查看最近执行的10个命令)</p><hr><h3 id="4、时间日期类指令"><a href="#4、时间日期类指令" class="headerlink" title="4、时间日期类指令"></a>4、时间日期类指令</h3><p>date指令<br>显示当前日期<br>基本语法：<br>date (功能描述：显示当前时间)<br>date +%Y (功能描述：显示当前年份)<br>date +%m (功能描述：显示当前月份)<br>date +%d (功能描述：显示当前是哪一天)<br>date “+%Y-%m-%d %H:%M:%S” (功能描述：显示年月日时分秒)</p><p>设置日期<br>基本语法：date -s 字符串时间 【比如：date -s “2022-07-05 10:07:35”】</p><p>cal指令<br>查看日历<br>基本语法：cal [选项] (功能描述：不加选项，显示本月日历)</p><hr><h3 id="5、搜素和查找类指令"><a href="#5、搜素和查找类指令" class="headerlink" title="5、搜素和查找类指令"></a>5、搜素和查找类指令</h3><p>find指令<br>从指定目录向下递归地遍历其各个子目录，将满足条件地文件或者目录显示在终端。<br>基本语法：find [搜索范围] [选项]<br>选项说明：<br>-name&lt;查询方式&gt;：按照指定的文件名查找模式查找文件<br>-user&lt;用户名&gt;：查找属于指定用户名所有文件<br>-size&lt;文件大小&gt;：按照指定的文件大小查找文件<br>比如：查找整个linux系统下大于200M的文件（+n大于 -n小于 n等于， 单位有k,M,G）<br>            find / -size +200<br>           按文件名，根据名称查找/home目录下的hello.txt文件<br>           find /home -name hello.txt</p><p>locate指令<br>可以快速定位文件的路径。locate指令利用事先建立的系统中所有文件名称以及路径的locate数据库实现快速定位给定的文件。locate指令无需遍历整个文件系统，查询速度较快。为了保证查询结果的准确度，管理员必须定期更新locate时刻。<br>基本语法：locate 搜索文件<br>【由于locate指令基于数据库进行查询，所以第一次运行前，必须使用updatedb指令创建locate数据库】<br>【没有locate数据库，可以使用指令 yum -y install mlocate 安装】</p><p>grep指令和管道符 |<br>grep过滤查找，管道符 “|” 表示将前一个命令的处理结果输出传递给后面的命令处理。<br>基本语法：grep [选项] 查找内容 源文件<br>常用选项：<br>-n：显示匹配行及行号。<br>-i：忽略字母大小写。<br>比如：在hello.txt文件中，查找“yes”所在行，并显示行号<br>写法1：cat /home/hello.txt | grep -n “yes”<br>写法2：grep -n “yes” /home/hello.txt</p><hr><h3 id="6、压缩和解压类指令"><a href="#6、压缩和解压类指令" class="headerlink" title="6、压缩和解压类指令"></a>6、压缩和解压类指令</h3><p>gzip/gunzip指令<br>gzip用于压缩文件，gunzip用于解压文件。<br>基本语法：<br>gzip 文件 (功能描述：压缩文件，只能将文件压缩为*.gz文件)<br>gunzip 文件 (功能描述：解压缩文件命令)</p><p>zip/unzip指令<br>zip用于压缩文件，unzip用于解压文件，这个在项目打包发布中很有用。<br>基本语法：<br>zip [选项] xxx.zip 将要压缩的内容 (功能描述：压缩文件和目录的命令)<br>unzip [选项] xxx.zip (功能描述：解压缩文件)<br>zip常用选项：<br>-r：递归压缩，即压缩目录<br>比如：将/home下的所有文件/文件夹进行压缩，压缩成myhome.zip<br>zip -r myhome.zip /home/</p><p>tar指令<br>打包。<br>基本语法：tar [选项] xxx.tar.gz 打包的内容 (功能描述：打包目录，压缩后的文件格式.tar.gz)<br>选项说明：<br>-c：新建打包文件<br>-v：显示详细信息<br>-f：指定压缩后的文件名<br>-z：打包同时压缩<br>-x：解包.tar文件<br>一般组合：tar -zcvf</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、运行级别&quot;&gt;&lt;a href=&quot;#1、运行级别&quot; class=&quot;headerlink&quot; title=&quot;1、运行级别&quot;&gt;&lt;/a&gt;1、运行级别&lt;/h3&gt;&lt;p&gt;0：关机&lt;br&gt;1：单用户【找回丢失密码】&lt;br&gt;2：多用户状态没有网络服务&lt;br&gt;3：多用户状态有网络服务</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习6-用户管理</title>
    <link href="http://example.com/2022/07/03/py_day19/"/>
    <id>http://example.com/2022/07/03/py_day19/</id>
    <published>2022-07-03T03:50:12.833Z</published>
    <updated>2022-07-04T02:11:34.533Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、添加用户-删除用户"><a href="#1、添加用户-删除用户" class="headerlink" title="1、添加用户/删除用户"></a>1、添加用户/删除用户</h3><p>添加用户基本语法：useradd 用户名<br>删除用户基本语法：userdel 用户名</p><hr><h3 id="2、指定-修改密码"><a href="#2、指定-修改密码" class="headerlink" title="2、指定/修改密码"></a>2、指定/修改密码</h3><p>基本语法：<br>password 用户名</p><hr><h3 id="3、查询用户信息-切换用户-查看当前用户"><a href="#3、查询用户信息-切换用户-查看当前用户" class="headerlink" title="3、查询用户信息/切换用户/查看当前用户"></a>3、查询用户信息/切换用户/查看当前用户</h3><p>基本语法：<br>id 用户名</p><p>基本语法：<br>su - 用户名<br>从权限高的用户切换到权限低的用户，不需要输入密码，反之需要。当需要返回到原来用户时，使用exit/logout指令。</p><p>基本语法：<br>whoami</p><hr><h3 id="4、用户组"><a href="#4、用户组" class="headerlink" title="4、用户组"></a>4、用户组</h3><p>添加<br>基本语法：groupadd 组名</p><p>删除<br>基本语法：groupdel 组名</p><p>增加用户时直接上组<br>基本语法：useradd -g 用户组 用户名</p><p>修改用户组<br>基本语法：usermod -g 用户组 用户名</p><hr><h3 id="5、用户和组相关文件"><a href="#5、用户和组相关文件" class="headerlink" title="5、用户和组相关文件"></a>5、用户和组相关文件</h3><p>/etc/passwd 文件<br>用户(user)的配置文件，记录用户的各种信息。<br>每行的含义：用户名:口令:用户标识号:组织标识号:注释性描述:主目录:登录shell</p><p>/etc/shadow 文件<br>口令的配置文件。<br>每行的含义：登录名:加密口令:最后一次修改时间:最小时间间隔:最大时间间隔:警告时间:不活动时间:失效时间:标志</p><p>/etc/group 文件<br>组(group)配置文件，记录linux包括的组信息。<br>每行含义：组名:口令:组标识符:组内用户列表</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、添加用户-删除用户&quot;&gt;&lt;a href=&quot;#1、添加用户-删除用户&quot; class=&quot;headerlink&quot; title=&quot;1、添加用户/删除用户&quot;&gt;&lt;/a&gt;1、添加用户/删除用户&lt;/h3&gt;&lt;p&gt;添加用户基本语法：useradd 用户名&lt;br&gt;删除用户基本语法：u</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习4-vim</title>
    <link href="http://example.com/2022/07/01/py_day18/"/>
    <id>http://example.com/2022/07/01/py_day18/</id>
    <published>2022-07-01T01:53:35.361Z</published>
    <updated>2022-07-03T03:50:03.496Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、常用的三种模式"><a href="#1、常用的三种模式" class="headerlink" title="1、常用的三种模式"></a>1、常用的三种模式</h3><p>a、正常模式<br>以vim打开一个档案就直接进入一般模式了（这是默认的模式）。在这个模式中，可以使用【上下左右】按键来移动光标，可以使用【删除字符】或【删除整行】来处理档案内容，也可以使用【复制、粘贴】来处理你的文件数据。</p><p>b、插入模式<br>按下i，I，o，O，a，A，r，R等任何一个字母之后才会进入编辑模式，一般来说按i即可。</p><p>c、命令行模式<br>顺序输入 “esc” 、 “：” 进入命令行模式。在这个模式当中，可以提供你相关指令。读取、存盘、替换、离开vim、显示行号等动作是在此模式中达成。</p><hr><h3 id="2、各种模式的相互切换"><a href="#2、各种模式的相互切换" class="headerlink" title="2、各种模式的相互切换"></a>2、各种模式的相互切换</h3><p>命令行进入一般模式：vim xxx</p><p>一般模式进入编辑模式：i或a<br>编辑模式进入一般模式：esc<br>一般模式进入命令模式：“：”或者 “ / “<br>命令模式进入一般模式：esc</p><p>命令模式退出到命令行：“ :wq ”（保存退出）、“ :q ”（退出）、“ :q! ”（强制退出，不保存）</p><hr><h3 id="3、快捷键"><a href="#3、快捷键" class="headerlink" title="3、快捷键"></a>3、快捷键</h3><p>1、拷贝当前行 yy，拷贝当前行向下的5行 5yy，并粘贴（输入p）。<br>2、删除当前行 dd，删除当前行向下的5行 5dd。<br>3、在文件中查找某个单词 [命令行向下 /关键字，回车 查找，输入 n 就是查找下一个]</p><p>4、设置文件的行号/取消文件的行号。[命令行下 :set nu 和 :set nonu]<br>5、最末行 [G]，最首行 [gg]。<br>6、撤销动作：[u]。<br>7、快速定位行：[行号 shit+g]。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、常用的三种模式&quot;&gt;&lt;a href=&quot;#1、常用的三种模式&quot; class=&quot;headerlink&quot; title=&quot;1、常用的三种模式&quot;&gt;&lt;/a&gt;1、常用的三种模式&lt;/h3&gt;&lt;p&gt;a、正常模式&lt;br&gt;以vim打开一个档案就直接进入一般模式了（这是默认的模式）。在这</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习3-目录结构</title>
    <link href="http://example.com/2022/06/30/py_day17/"/>
    <id>http://example.com/2022/06/30/py_day17/</id>
    <published>2022-06-30T09:30:30.219Z</published>
    <updated>2022-07-01T01:53:25.205Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、基本介绍"><a href="#1、基本介绍" class="headerlink" title="1、基本介绍"></a>1、基本介绍</h3><p>linux的文件系统采用的是层级式的树状目录结构，在此结构中的最上层式根目录 “/”，然后在此目录下再创建其他的目录。<strong>在linux世界里，一切皆文件。</strong></p><hr><h3 id="2、具体的目录结构"><a href="#2、具体的目录结构" class="headerlink" title="2、具体的目录结构"></a>2、具体的目录结构</h3><p>/bin 【常用】 （/usr/bin、/usr/local/bin）<br>是Binary的缩写，这个目录存放着最经常使用的命令。</p><p>/sbin （/usr/sbin、/usr/local/sbin）<br>s就是super user的意思，这里存放的是系统管理员使用的系统管理程序。</p><p>/home 【常用】<br>存放普通用户的主目录，在linux中每个用户都有一个自己的目录，一般该目录名是以用户的账号命名。</p><p>/root 【常用】<br>该目录为系统管理员，也称作超级权限者的用户主目录。</p><p>/lib<br>系统开机所需要最基本的动态连接共享库，其作用类似于Windows里的DLL文件。几乎所有的应用程序都需要用到这些共享库。</p><p>/lost+found<br>这个目录一般情况下是空的，当系统非法关机后，这里就存放了一些文件。</p><p>/etc 【常用】<br>所有的系统管理所需要的配置文件和子目录，比如安装mysql数据库 my.conf。</p><p>/usr 【常用】<br>这是一个非常重要的目录，用户的很多应用程序和文件都放在这个目录下，类似与windows下的program files目录。</p><p>/boot 【常用】<br>存放的是启动linux时使用的一些核心文件，包括一些连接文件以及镜像文件。</p><p>/proc 【不能动】<br>这个目录是一个虚拟的目录，它是系统内存的映射，访问这个目录来获取系统信息。</p><p>/srv 【不能动】<br>service缩写，该目录存放一些服务启动之后需要提取的数据。</p><p>/sys 【不能动】<br>这是linux2.6内核的一个很大的变化，该目录下安装了2.6内核中新出现的一个文件系统sysfs。</p><p>/tmp<br>这个目录是用来存放一些临时文件的。</p><p>/dev<br>类似于Windows的设备管理器，把所有的硬件用文件的形式存储。</p><p>/media 【常用】<br>linux系统会自动识别一些设备，例如U盘、光驱等等，当识别后，linux会把识别的设备挂载到这个目录下。</p><p>/mnt 【常用】<br>系统提供该目录是为了让用户临时挂载别的文件系统的，我们可以将外部的存储挂载在 /mnt/ 上，<br>然后进入该目录就可以查看里面的内容了。d:/myshare</p><p>/opt<br>这是给主机额外安装软件所摆放的目录。如安装ORACLE数据库就可以放到该目录下。默认为空。</p><p>/usr/local 【常用】<br>这是另一个给主机额外安装软件所安装的目录。一般是通过编译源码方式安装的程序。</p><p>/var 【常用】<br>这个目录中存放着在不断扩充着的东西，习惯将经常被修改的目录放在这个目录下。包括各种日志文件。</p><p>/selinux [security-enhanced linux]<br>SELinux是一种安全子系统，它能控制程序只能访问特定文件，有三种工作模式，可以自行设置。</p><hr>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、基本介绍&quot;&gt;&lt;a href=&quot;#1、基本介绍&quot; class=&quot;headerlink&quot; title=&quot;1、基本介绍&quot;&gt;&lt;/a&gt;1、基本介绍&lt;/h3&gt;&lt;p&gt;linux的文件系统采用的是层级式的树状目录结构，在此结构中的最上层式根目录 “/”，然后在此目录下再创建其</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>linux学习2-虚拟机的克隆、快照、迁移和删除</title>
    <link href="http://example.com/2022/06/30/py_day16/"/>
    <id>http://example.com/2022/06/30/py_day16/</id>
    <published>2022-06-30T08:09:59.968Z</published>
    <updated>2022-06-30T08:57:04.611Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、虚拟机克隆"><a href="#1、虚拟机克隆" class="headerlink" title="1、虚拟机克隆"></a>1、虚拟机克隆</h3><p>如果已经安装了一台linux操作系统，还想再要更多的，没有必要再重新安装，只需要克隆就可以了。</p><p>方式1：直接拷贝一份安装好的虚拟机文件<br>方式2：使用vmware的克隆操作，克隆时，需要先关闭linux系统</p><hr><h3 id="2、虚拟机快照"><a href="#2、虚拟机快照" class="headerlink" title="2、虚拟机快照"></a>2、虚拟机快照</h3><p>如果再使用虚拟机系统的时候（比如linux），想要回到原先的某一个状态，也就是说你担心可能有些误操作造成系统异常，需要回到原先某个正常的运行状态，vmware也提供了这样的功能，就叫快照管理</p><p>应用实例：<br>1、按照好系统以后，先做一个快照A<br>2、进入到系统。创建一个文件夹，再保存一个快照B<br>3、回到系统刚刚按照好的状态，即 快照A</p><hr><h3 id="3、虚拟机迁移和删除"><a href="#3、虚拟机迁移和删除" class="headerlink" title="3、虚拟机迁移和删除"></a>3、虚拟机迁移和删除</h3><p>虚拟系统安装好了，它的本质就是文件。因此虚拟系统的迁移很方便，可以把安装好的虚拟系统这个文件夹整体<strong>拷贝或者剪切</strong>到另外位置使用。删除也很简单，用vmware进行移除，在点击菜单-&gt;从磁盘删除即可，或者直接手动删除虚拟系统对应的文件夹即可。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、虚拟机克隆&quot;&gt;&lt;a href=&quot;#1、虚拟机克隆&quot; class=&quot;headerlink&quot; title=&quot;1、虚拟机克隆&quot;&gt;&lt;/a&gt;1、虚拟机克隆&lt;/h3&gt;&lt;p&gt;如果已经安装了一台linux操作系统，还想再要更多的，没有必要再重新安装，只需要克隆就可以了。&lt;/p</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>学习14-存储数据</title>
    <link href="http://example.com/2022/06/30/py_day15/"/>
    <id>http://example.com/2022/06/30/py_day15/</id>
    <published>2022-06-30T03:38:21.213Z</published>
    <updated>2022-06-30T03:38:21.306Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、数据的存取（json格式）"><a href="#1、数据的存取（json格式）" class="headerlink" title="1、数据的存取（json格式）"></a>1、数据的存取（json格式）</h3><h4 id="1-1、写（存）数据-json-dump-文件名-操作类型"><a href="#1-1、写（存）数据-json-dump-文件名-操作类型" class="headerlink" title="1.1、写（存）数据 json.dump(文件名, 操作类型)"></a>1.1、写（存）数据 json.dump(文件名, 操作类型)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line"></span><br><span class="line">filename = &#x27;numbers.json&#x27;</span><br><span class="line">with open(filename, &#x27;w&#x27;) as fObj:</span><br><span class="line">    json.dump(numbers, fObj)</span><br></pre></td></tr></table></figure><h4 id="1-2、读（取）数据-json-load-对象"><a href="#1-2、读（取）数据-json-load-对象" class="headerlink" title="1.2、读（取）数据 json.load(对象)"></a>1.2、读（取）数据 json.load(对象)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line"></span><br><span class="line">filename = &#x27;numbers.json&#x27;</span><br><span class="line">with open(filename) as fObj:</span><br><span class="line">    numbers = json.load(fObj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure><p>例子1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">filename = &#x27;username.json&#x27;</span><br><span class="line">try:</span><br><span class="line">    with open(filename) as fObj:</span><br><span class="line">        username = json.load(fObj)</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    username = input(&quot;What is your name? &quot;)</span><br><span class="line">    with open(filename, &#x27;w&#x27;) as fObj:</span><br><span class="line">        json.dump(username, fObj)</span><br><span class="line">        print(&quot;We will remember you when you come back, &quot; + username + &quot;!&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;Welcome back, &quot; + username + &quot;!&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、数据的存取（json格式）&quot;&gt;&lt;a href=&quot;#1、数据的存取（json格式）&quot; class=&quot;headerlink&quot; title=&quot;1、数据的存取（json格式）&quot;&gt;&lt;/a&gt;1、数据的存取（json格式）&lt;/h3&gt;&lt;h4 id=&quot;1-1、写（存）数据-js</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习14-存储数据</title>
    <link href="http://example.com/2022/06/23/py_day14/"/>
    <id>http://example.com/2022/06/23/py_day14/</id>
    <published>2022-06-23T09:16:43.947Z</published>
    <updated>2022-06-24T01:14:41.483Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、数据的存取（json格式）"><a href="#1、数据的存取（json格式）" class="headerlink" title="1、数据的存取（json格式）"></a>1、数据的存取（json格式）</h3><h4 id="1-1、写（存）数据-json-dump-文件名-操作类型"><a href="#1-1、写（存）数据-json-dump-文件名-操作类型" class="headerlink" title="1.1、写（存）数据 json.dump(文件名, 操作类型)"></a>1.1、写（存）数据 json.dump(文件名, 操作类型)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line"></span><br><span class="line">filename = &#x27;numbers.json&#x27;</span><br><span class="line">with open(filename, &#x27;w&#x27;) as fObj:</span><br><span class="line">    json.dump(numbers, fObj)</span><br></pre></td></tr></table></figure><h4 id="1-2、读（取）数据-json-load-对象"><a href="#1-2、读（取）数据-json-load-对象" class="headerlink" title="1.2、读（取）数据 json.load(对象)"></a>1.2、读（取）数据 json.load(对象)</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">numbers = [2, 3, 5, 7, 11, 13]</span><br><span class="line"></span><br><span class="line">filename = &#x27;numbers.json&#x27;</span><br><span class="line">with open(filename) as fObj:</span><br><span class="line">    numbers = json.load(fObj)</span><br><span class="line"></span><br><span class="line">print(numbers)</span><br></pre></td></tr></table></figure><p>例子1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import json</span><br><span class="line"></span><br><span class="line">filename = &#x27;username.json&#x27;</span><br><span class="line">try:</span><br><span class="line">    with open(filename) as fObj:</span><br><span class="line">        username = json.load(fObj)</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    username = input(&quot;What is your name? &quot;)</span><br><span class="line">    with open(filename, &#x27;w&#x27;) as fObj:</span><br><span class="line">        json.dump(username, fObj)</span><br><span class="line">        print(&quot;We will remember you when you come back, &quot; + username + &quot;!&quot;)</span><br><span class="line">else:</span><br><span class="line">    print(&quot;Welcome back, &quot; + username + &quot;!&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、数据的存取（json格式）&quot;&gt;&lt;a href=&quot;#1、数据的存取（json格式）&quot; class=&quot;headerlink&quot; title=&quot;1、数据的存取（json格式）&quot;&gt;&lt;/a&gt;1、数据的存取（json格式）&lt;/h3&gt;&lt;h4 id=&quot;1-1、写（存）数据-js</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习13-异常</title>
    <link href="http://example.com/2022/06/23/py_day13/"/>
    <id>http://example.com/2022/06/23/py_day13/</id>
    <published>2022-06-23T08:24:46.507Z</published>
    <updated>2022-06-23T09:11:44.100Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、处理异常try-except"><a href="#1、处理异常try-except" class="headerlink" title="1、处理异常try-except"></a>1、处理异常try-except</h3><p>用法：try:<br>        except:<br>        else:</p><p>例子1：try-except模块中代码执行失败则进入except模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">try:</span><br><span class="line">    print(5/0)</span><br><span class="line">except ZeroDivisionError:</span><br><span class="line">    print(&quot;You can&#x27;t divide by zero!&quot;)</span><br></pre></td></tr></table></figure><p>例子2：try-except模块中代码成功执行则进入else模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;Give me two nums, and I will divide them.&quot;)</span><br><span class="line">print(&quot;Enter &#x27;q&#x27; to quit.&quot;)</span><br><span class="line"></span><br><span class="line">while True:</span><br><span class="line">    firstNumber = input(&quot;\nFirst num: &quot;)</span><br><span class="line">    if firstNumber == &#x27;q&#x27;:</span><br><span class="line">        break</span><br><span class="line">    elif not str.isdigit(firstNumber):</span><br><span class="line">        print(&quot;Plz re-input&quot;)</span><br><span class="line">        continue</span><br><span class="line">    secondNumber = input(&quot;\nFirst num: &quot;)</span><br><span class="line">    if secondNumber == &#x27;q&#x27;:</span><br><span class="line">        break</span><br><span class="line">    elif not str.isdigit(secondNumber):</span><br><span class="line">        print(&quot;Plz re-input&quot;)</span><br><span class="line">        continue</span><br><span class="line">    try:</span><br><span class="line">        answer = int(firstNumber) / int(secondNumber)</span><br><span class="line">    except ZeroDivisionError:</span><br><span class="line">        print(&quot;You can&#x27;t divide by 0!&quot;)</span><br><span class="line">    else:</span><br><span class="line">        print(answer)</span><br></pre></td></tr></table></figure><p>例子3：捕获到异常时什么都不做</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;alice.txt&#x27;</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    with open(filename) as fObj:</span><br><span class="line">        contents = fObj.read()</span><br><span class="line">except FileNotFoundError:</span><br><span class="line">    pass</span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、处理异常try-except&quot;&gt;&lt;a href=&quot;#1、处理异常try-except&quot; class=&quot;headerlink&quot; title=&quot;1、处理异常try-except&quot;&gt;&lt;/a&gt;1、处理异常try-except&lt;/h3&gt;&lt;p&gt;用法：try:&lt;br&gt;   </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习12-文件的读写</title>
    <link href="http://example.com/2022/06/22/py_day12/"/>
    <id>http://example.com/2022/06/22/py_day12/</id>
    <published>2022-06-22T02:37:47.100Z</published>
    <updated>2022-06-23T08:34:11.014Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、读文件"><a href="#1、读文件" class="headerlink" title="1、读文件"></a>1、读文件</h3><h4 id="1-1、读文件"><a href="#1-1、读文件" class="headerlink" title="1.1、读文件"></a>1.1、读文件</h4><p>用法：with open(‘文件名’) as 别名<br>变量 = 别名.read()<br>print(变量)</p><p>步骤：<br>–&gt; 打开文件，open()。Python在当前执行的文件所在的目录中查找指定的文件。函数open()返回一个表示文件的对象。<br>–&gt; 关闭文件，with()自动关闭文件。<br>–&gt; 读取文件，read()，返回一个字符串存储在变量中。</p><h4 id="1-2、文件路径"><a href="#1-2、文件路径" class="headerlink" title="1.2、文件路径"></a>1.2、文件路径</h4><p>相对路径：<br>linux/OS X：with open(‘text_files/filename.txt’) as file_object: （斜杠）<br>Windows：with open(‘text_files\filename.txt’) as file_object: （反斜杠）<br>绝对路径：<br>linux/OS X：file_path = ‘/home/ehmatthes/other_files/text_files/filename.txt’<br>with open(file_path) as file_object:<br>Windows：file_path = ‘C:\Users\ehmatthes\other_files\text_files\filename.txt’<br>with open(file_path) as file_object:</p><h4 id="1-3、逐行读取"><a href="#1-3、逐行读取" class="headerlink" title="1.3、逐行读取"></a>1.3、逐行读取</h4><p>使用for循环</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;pi_digits.txt&#x27;</span><br><span class="line"></span><br><span class="line">with open(filename) as fileObject:</span><br><span class="line">    for line in fileObject:</span><br><span class="line">        print(line.rstrip())</span><br></pre></td></tr></table></figure><h4 id="1-4、使用列表保存文件内容"><a href="#1-4、使用列表保存文件内容" class="headerlink" title="1.4、使用列表保存文件内容"></a>1.4、使用列表保存文件内容</h4><blockquote><p>使用关键字with时， open()返回的文件对象只在with代码块内可用。如果要在with代码块外访问文件的内容，可在with代码块内将文件的各行存储在一个列表中，并在with代码块外使用该列表：你可以立即处理文件的各个部分，也可推迟到程序后面再处理。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;pi_digits.txt&#x27;</span><br><span class="line"></span><br><span class="line">with open(filename) as fileObject:</span><br><span class="line">    lines = fileObject.readlines()</span><br><span class="line"></span><br><span class="line">for line in lines:</span><br><span class="line">    print(line.rstrip())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>readlines()方法返回一个列表，文件各行存储在这这个列表中</strong></p><h4 id="1-5、使用文件的内容"><a href="#1-5、使用文件的内容" class="headerlink" title="1.5、使用文件的内容"></a>1.5、使用文件的内容</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;pi_digits.txt&#x27;</span><br><span class="line"></span><br><span class="line">with open(filename) as fileObject:</span><br><span class="line">    lines = fileObject.readlines()</span><br><span class="line"></span><br><span class="line">piStr = &#x27;&#x27;</span><br><span class="line">for line in lines:</span><br><span class="line">    piStr += line.strip()</span><br><span class="line"></span><br><span class="line">print(piStr)</span><br><span class="line">print(len(piStr))</span><br></pre></td></tr></table></figure><p><em><strong>读取文本文件时， Python将其中的所有文本都解读为字符串。如果你读取的是数字，并要将其作为数值使用，就必须使用函数int()将其转换为整数，或使用函数float()将其转换为浮点数。</strong></em></p><h3 id="2、写文件"><a href="#2、写文件" class="headerlink" title="2、写文件"></a>2、写文件</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">filename = &#x27;programming.txt&#x27;</span><br><span class="line"></span><br><span class="line">with open(filename, &#x27;w&#x27;) as fileObject:</span><br><span class="line">    fileObject.write(&quot;I love programming&quot;)</span><br></pre></td></tr></table></figure><p>open()中第一个参数指要打开文件的名称，第二个参数指以写入的方式打开文件。<br>可指定模式有的：w（写入）、r（读取）、a（附加）、r+（读写）。py默认读取模式打开文件。</p><p><em><strong>Python只能将字符串写入文本文件。要将数值数据存储到文本文件中，必须先使用函数str()将其转换为字符串格式。</strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、读文件&quot;&gt;&lt;a href=&quot;#1、读文件&quot; class=&quot;headerlink&quot; title=&quot;1、读文件&quot;&gt;&lt;/a&gt;1、读文件&lt;/h3&gt;&lt;h4 id=&quot;1-1、读文件&quot;&gt;&lt;a href=&quot;#1-1、读文件&quot; class=&quot;headerlink&quot; title=</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习11-继承</title>
    <link href="http://example.com/2022/06/21/py_day11/"/>
    <id>http://example.com/2022/06/21/py_day11/</id>
    <published>2022-06-21T09:12:50.958Z</published>
    <updated>2022-06-22T02:15:44.911Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、子类构造器"><a href="#1、子类构造器" class="headerlink" title="1、子类构造器"></a>1、子类构造器</h3><blockquote><p>创建子类的实例时， Python首先需要完成的任务是给父类的所有属性赋值。为此，子类的方法__init__()需要父类施以援手。</p></blockquote><p>**py的属性是放在构造器里的</p><p>a、创建子类时，父类位于子类前面<br>b、定义子类时，必须在括号内指定父类的名称<br>c、super()引用父类的构造器</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">class Car():</span><br><span class="line"></span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        self.make = make</span><br><span class="line">        self.model = model</span><br><span class="line">        self.year = year</span><br><span class="line">        self.odometerReading = 0</span><br><span class="line"></span><br><span class="line">    def getDescriptiveName(self):</span><br><span class="line">        longName = str(self.year) + &#x27; &#x27; + self.make + &#x27; &#x27; + self.model</span><br><span class="line">        return longName.title()</span><br><span class="line"></span><br><span class="line">    def readOdometer(self):</span><br><span class="line">        print(&quot;This car has &quot; + str(self.odometerReading) + &quot; miles on it.&quot;)</span><br><span class="line"></span><br><span class="line">    def updateOdometer(self, mileage):</span><br><span class="line">        if mileage &gt;= self.odometerReading:</span><br><span class="line">            self.odometerReading = mileage</span><br><span class="line">        else:</span><br><span class="line">            print(&quot;You can&#x27;t roll back an odometer!&quot;)</span><br><span class="line"></span><br><span class="line">    def incrementOdometer(self, miles):</span><br><span class="line">        self.odometerReading += miles</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ElectricCar(Car):</span><br><span class="line">    </span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">myTesla = ElectricCar(&#x27;tesla&#x27;, &#x27;model s&#x27;, 2016)</span><br><span class="line">print(myTesla.getDescriptiveName())</span><br></pre></td></tr></table></figure><h3 id="2、给子类定义属性和方法"><a href="#2、给子类定义属性和方法" class="headerlink" title="2、给子类定义属性和方法"></a>2、给子类定义属性和方法</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">class ElectricCar(Car):</span><br><span class="line"></span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.batterySize = 70</span><br><span class="line"></span><br><span class="line">    def describeBattery(self):</span><br><span class="line">        print(&quot;This car has a &quot; + str(self.batterySize) + &quot;-kWh battery.&quot;)</span><br><span class="line"></span><br><span class="line">myTesla = ElectricCar(&#x27;tesla&#x27;, &#x27;model s&#x27;, 2016)</span><br><span class="line">print(myTesla.getDescriptiveName())</span><br><span class="line">myTesla.describeBattery()</span><br></pre></td></tr></table></figure><h3 id="3、重写"><a href="#3、重写" class="headerlink" title="3、重写"></a>3、重写</h3><blockquote><p>对于父类的方法，只要它不符合子类模拟的实物的行为，都可对其进行重写。为此，可在子类中定义一个这样的方法，即它与要重写的父类方法同名。这样， Python将不会考虑这个父类方法，而只关注你在子类中定义的相应方法。</p></blockquote><h3 id="4、将实例用作属性"><a href="#4、将实例用作属性" class="headerlink" title="4、将实例用作属性"></a>4、将实例用作属性</h3><blockquote><p>不断给ElectricCar类添加细节时，我们可能会发现其中包含很多专门针对汽车电瓶的属性和方法。在这种情况下，我们可将这些属性和方法提取出来，放到另一个名为Battery的类中，并将一个Battery实例用作ElectricCar类的一个属性。</p></blockquote><p>***这行代码让Python在实例my_tesla中查找属性battery，并对存储在该属性中的Battery实例调用方法describe_battery()。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">class Battery():</span><br><span class="line"></span><br><span class="line">    def __init__(self, batterySzie =70):</span><br><span class="line">        self.batterySize = batterySzie</span><br><span class="line"></span><br><span class="line">    def describeBattery(self):</span><br><span class="line">        print(&quot;This car has a &quot; + str(self.batterySize) + &quot;-kWh battery.&quot;)</span><br><span class="line"></span><br><span class="line">    def getRange(self):</span><br><span class="line">        if self.batterySize == 70:</span><br><span class="line">            range = 240</span><br><span class="line">        elif self.batterySize == 85:</span><br><span class="line">            range = 270</span><br><span class="line"></span><br><span class="line">        message = &quot;This car can go approximately &quot; + str(range)</span><br><span class="line">        message += &quot; miles on a full charge.&quot;</span><br><span class="line">        print(message)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class ElectricCar(Car):</span><br><span class="line"></span><br><span class="line">    def __init__(self, make, model, year):</span><br><span class="line">        super().__init__(make, model, year)</span><br><span class="line">        self.battery = Battery()</span><br><span class="line"></span><br><span class="line">    def describeBattery(self):</span><br><span class="line">        print(&quot;This car has a &quot; + str(self.batterySize) + &quot;-kWh battery.&quot;)</span><br><span class="line"></span><br><span class="line">myTesla = ElectricCar(&#x27;tesla&#x27;, &#x27;model s&#x27;, 2016)</span><br><span class="line">print(myTesla.getDescriptiveName())</span><br><span class="line">myTesla.battery.describeBattery()</span><br><span class="line">myTesla.battery.getRange()</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、子类构造器&quot;&gt;&lt;a href=&quot;#1、子类构造器&quot; class=&quot;headerlink&quot; title=&quot;1、子类构造器&quot;&gt;&lt;/a&gt;1、子类构造器&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;创建子类的实例时， Python首先需要完成的任务是给父类的所有属性赋值。</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习10-类</title>
    <link href="http://example.com/2022/06/19/py_day10/"/>
    <id>http://example.com/2022/06/19/py_day10/</id>
    <published>2022-06-19T02:05:05.962Z</published>
    <updated>2022-06-19T11:22:31.703Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、创建和使用类"><a href="#1、创建和使用类" class="headerlink" title="1、创建和使用类"></a>1、创建和使用类</h3><h4 id="1-1、创建类"><a href="#1-1、创建类" class="headerlink" title="1.1、创建类"></a>1.1、创建类</h4><blockquote><p>根据约定，在Python中，首字母大写的名称指的是类。这个类定义中的括号是空的，因为我们要从空白创建这个类。</p></blockquote><p>用法：class Name(object):<br>            def  _<em>init_</em>(self):</p><p>1、_<em>init_</em>(self)<br>这是一个特殊的方法，类似java中的构造器，每当创建新实例的时候，py就会自动运行这个方法。方法中self形参必不可少，且必须位于最前面。self是一个指向实例本身的引用，相当于java中的this。<br>在类的代码中，需要访问当前实例中的变量和函数，即访问实例中的：<br>    a、对应的变量（属性）：Instance.ProperyNam，实现读写<br>    b、调用对应函数：Instance.function()，执行对应的动作<br>需要访问实例变量和调用实例函数，当然需要对应的实例对象本身。而在py中就规定好了，函数的第一个参数，就必须是实例对象本身，并且规定为self。</p><p>**类在初始化实例时通过self拿到实例引用，然后给实例进行初始化</p><h4 id="1-2、创建实例"><a href="#1-2、创建实例" class="headerlink" title="1.2、创建实例"></a>1.2、创建实例</h4><p>用法： instance = class();<br>py通过class的init方法创建一个实例，然后将其引用返回给instance。</p><h3 id="2、使用类和实例"><a href="#2、使用类和实例" class="headerlink" title="2、使用类和实例"></a>2、使用类和实例</h3><h4 id="2-1、修改属性的值"><a href="#2-1、修改属性的值" class="headerlink" title="2.1、修改属性的值"></a>2.1、修改属性的值</h4><p>a、直接修改<br>instance.propery = x<br>b、通过方法修改<br>def updatePropery(self, num):<br>    self.propery = num</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、创建和使用类&quot;&gt;&lt;a href=&quot;#1、创建和使用类&quot; class=&quot;headerlink&quot; title=&quot;1、创建和使用类&quot;&gt;&lt;/a&gt;1、创建和使用类&lt;/h3&gt;&lt;h4 id=&quot;1-1、创建类&quot;&gt;&lt;a href=&quot;#1-1、创建类&quot; class=&quot;header</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习9-函数</title>
    <link href="http://example.com/2022/06/10/py_day9/"/>
    <id>http://example.com/2022/06/10/py_day9/</id>
    <published>2022-06-10T07:29:05.111Z</published>
    <updated>2022-06-19T02:00:55.037Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、定义函数"><a href="#1、定义函数" class="headerlink" title="1、定义函数"></a>1、定义函数</h3><p>用法：def 函数名(完成任务需要的信息):<br>        （缩进）函数体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def greet_user(username):</span><br><span class="line">    print(&quot;Hello, &quot; + username.title() + &quot;!&quot;)</span><br><span class="line"></span><br><span class="line">greet_user(&#x27;zhouyu&#x27;)</span><br></pre></td></tr></table></figure><h3 id="2、传递实参"><a href="#2、传递实参" class="headerlink" title="2、传递实参"></a>2、传递实参</h3><h4 id="2-1、位置实参"><a href="#2-1、位置实参" class="headerlink" title="2.1、位置实参"></a>2.1、位置实参</h4><blockquote><p>关联方式是基于实参的顺序。这种关联方式被称为位置实参。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, pet_name):</span><br><span class="line">    print(&quot;\nI have a &quot; + animal_type + &quot;.&quot;)</span><br><span class="line">    print(&quot;My &quot; + animal_type + &quot; &#x27;s name is &quot; + pet_name + &quot;.&quot;)</span><br><span class="line"></span><br><span class="line">describe_pet(&#x27;dog&#x27;, &#x27;wangwang&#x27;)</span><br></pre></td></tr></table></figure><h4 id="2-2、关键字实参"><a href="#2-2、关键字实参" class="headerlink" title="2.2、关键字实参"></a>2.2、关键字实参</h4><blockquote><p>关键字实参是传递给函数的名称—值对。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, pet_name):</span><br><span class="line">    print(&quot;\nI have a &quot; + animal_type + &quot;.&quot;)</span><br><span class="line">    print(&quot;My &quot; + animal_type + &quot; &#x27;s name is &quot; + pet_name + &quot;.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe_pet(animal_type=&#x27;dog&#x27;, pet_name=&#x27;wangwang&#x27;)</span><br></pre></td></tr></table></figure><p>***关键字实参的顺序无关紧要，因为Python知道各个值该存储到哪个形参中。</p><h4 id="2-3、默认值"><a href="#2-3、默认值" class="headerlink" title="2.3、默认值"></a>2.3、默认值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(pet_name, animal_type=&#x27;dog&#x27;):</span><br><span class="line">    print(&quot;\nI have a &quot; + animal_type + &quot;.&quot;)</span><br><span class="line">    print(&quot;My &quot; + animal_type + &quot; &#x27;s name is &quot; + pet_name + &quot;.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe_pet(&#x27;wangwang&#x27;)</span><br></pre></td></tr></table></figure><p>***使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参。<br>这让Python依然能够正确地解读位置实参</p><h3 id="3、返回值"><a href="#3、返回值" class="headerlink" title="3、返回值"></a>3、返回值</h3><blockquote><p>在函数中，可使用return语句将值返回到调用函数的代码行。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def getFotmattedName(firstName, lastName):</span><br><span class="line">    fullName = firstName + &quot; &quot; + lastName</span><br><span class="line">    return fullName</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">message = getFotmattedName(&#x27;zhou&#x27;, &#x27;yu&#x27;)</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><p>***Python将非空字符串解读为True</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def buildPerson(firstName, lastName):</span><br><span class="line">    person = &#123;&#x27;first&#x27;: firstName, &#x27;last&#x27;: lastName&#125;</span><br><span class="line">    return person</span><br><span class="line"></span><br><span class="line">message = buildPerson(&#x27;zhou&#x27;, &#x27;yu&#x27;)</span><br><span class="line">print(message)</span><br></pre></td></tr></table></figure><h3 id="4、传递列表"><a href="#4、传递列表" class="headerlink" title="4、传递列表"></a>4、传递列表</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def greatUsers(names):</span><br><span class="line">    for name in names:</span><br><span class="line">        msg = &quot;Hello! &quot; + name.title() + &quot;!&quot;</span><br><span class="line">        print(msg)</span><br><span class="line"></span><br><span class="line">userNames = [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;]</span><br><span class="line">greatUsers(userNames)</span><br></pre></td></tr></table></figure><h4 id="4-1、在函数中修改列表"><a href="#4-1、在函数中修改列表" class="headerlink" title="4.1、在函数中修改列表"></a>4.1、在函数中修改列表</h4><p>修改的是原始列表而不是它的副本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">def printModels(unprintedDesigns, completedModels):</span><br><span class="line">    while unprintedDesigns:</span><br><span class="line">        currentDesign = unprintedDesigns.pop()</span><br><span class="line">        print(&quot;Printing model: &quot; + currentDesign)</span><br><span class="line">        completedModels.append(currentDesign)</span><br><span class="line"></span><br><span class="line">def showCompletedModels(completedModels):</span><br><span class="line">    print(&quot;\nThe following models have been printed:&quot;)</span><br><span class="line">    for completedModel in completedModels:</span><br><span class="line">        print(completedModel)</span><br><span class="line"></span><br><span class="line">printModels(unprintedDesigns, completedModels)</span><br><span class="line">showCompletedModels(completedModels)</span><br></pre></td></tr></table></figure><h4 id="4-2、在函数中修改列表"><a href="#4-2、在函数中修改列表" class="headerlink" title="4.2、在函数中修改列表"></a>4.2、在函数中修改列表</h4><blockquote><p>可向函数传递列表的副本而不是原件；这样函数所做的任何修改都只影响副本，而丝毫不影响原件。</p></blockquote><p>用法：function_name(list_name[:])</p><blockquote><p>切片表示法[:]创建列表的副本。</p></blockquote><h3 id="5、任意数量实参（可变形参）"><a href="#5、任意数量实参（可变形参）" class="headerlink" title="5、任意数量实参（可变形参）"></a>5、任意数量实参（可变形参）</h3><p>用法：*形参名</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def makePizza(*toppings):</span><br><span class="line">    print(toppings)</span><br><span class="line"></span><br><span class="line">makePizza(&#x27;a&#x27;, &#x27;b&#x27;)</span><br><span class="line">makePizza(&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;)</span><br></pre></td></tr></table></figure><blockquote><p>形参名*toppings中的星号让Python创建一个名为toppings的空元组，并将收到的所有值都封装到这个元组中。</p></blockquote><h4 id="4-1、结合使用位置实参和任意数量实参"><a href="#4-1、结合使用位置实参和任意数量实参" class="headerlink" title="4.1、结合使用位置实参和任意数量实参"></a>4.1、结合使用位置实参和任意数量实参</h4><blockquote><p>如果要让函数接受不同类型的实参，必须在函数定义中将接纳任意数量实参的形参放在最后。<br>Python先匹配位置实参和关键字实参，再将余下的实参都收集到最后一个形参中。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">def makePizza(size, *toppings):</span><br><span class="line">    print(&quot;\nMaking a &quot; + str(size)</span><br><span class="line">          + &quot;-inch pizza with the following toppings:&quot;)</span><br><span class="line">    for topping in toppings:</span><br><span class="line">        print(&quot;- &quot; + topping)</span><br><span class="line">makePizza(16, &#x27;pepperoni&#x27;)</span><br><span class="line">makePizza(12, &#x27;mushrooms&#x27;, &#x27;green peppers&#x27;, &#x27;extra cheese&#x27;)</span><br></pre></td></tr></table></figure><h4 id="4-2、使用任意数量的关键字实参"><a href="#4-2、使用任意数量的关键字实参" class="headerlink" title="4.2、使用任意数量的关键字实参"></a>4.2、使用任意数量的关键字实参</h4><blockquote><p>形参**userInfo中的两个星号让Python创建一个名为userInfo的空字典，并将收到的所有名称—值对都封装到这个字典中。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">def buildProfile(first, last, **userInfo):</span><br><span class="line">    profile = &#123;&#125;</span><br><span class="line">    profile[&#x27;firstName&#x27;] = first</span><br><span class="line">    profile[&#x27;lastName&#x27;] = last</span><br><span class="line">    for key, value in userInfo.items():</span><br><span class="line">        profile[key] = value</span><br><span class="line">    return profile</span><br><span class="line"></span><br><span class="line">userProfile = buildProfile(&#x27;albert&#x27;, &#x27;einstein&#x27;, location = &#x27;princeton&#x27;, field = &#x27;physics&#x27;)</span><br><span class="line">print(userProfile)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、定义函数&quot;&gt;&lt;a href=&quot;#1、定义函数&quot; class=&quot;headerlink&quot; title=&quot;1、定义函数&quot;&gt;&lt;/a&gt;1、定义函数&lt;/h3&gt;&lt;p&gt;用法：def 函数名(完成任务需要的信息):&lt;br&gt;        （缩进）函数体&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习7-字典</title>
    <link href="http://example.com/2022/06/10/py_day7/"/>
    <id>http://example.com/2022/06/10/py_day7/</id>
    <published>2022-06-10T07:17:33.024Z</published>
    <updated>2022-06-10T07:17:33.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、使用字典"><a href="#1、使用字典" class="headerlink" title="1、使用字典"></a>1、使用字典</h3><p>1.1、字典是一系列的k-v对。<br>1.2、用法：student = {‘name’: ‘zhouyu’, ‘age’: 25, ‘sex’: ‘man’}<br>空字典： student = {}<br>1.3、增：<br>student[‘weight’] = 65<br>student[‘nation’] = ‘china’</p><p>1.4、删：<br>del student[‘weight’]</p><p>1.5、改：<br>student[‘weight’] = student[‘weight’] + 10<br>student[‘name’] = ‘zhangyifei’</p><h3 id="2、遍历字典"><a href="#2、遍历字典" class="headerlink" title="2、遍历字典"></a>2、遍历字典</h3><p>2.1、遍历k-v对：<br>for k, v in student.items():<br>print(k)<br>print(v)</p><p>2.2、遍历key：<br>for k in student.keys():<br>print(k)</p><p>for k in student:<br>print(k)</p><p>2.3、按顺序遍历key：<br>for k in sorted(student.keys()):<br>print(k)</p><p>2.4、遍历value：<br>for v in student.values():<br>print(v)</p><p>2.5、用集合set剔除重复：<br>for v in set(student.values()):<br>print(v)</p><h3 id="3、嵌套"><a href="#3、嵌套" class="headerlink" title="3、嵌套"></a>3、嵌套</h3><p>3.1、列表中嵌套字典：<br>student1 = {‘name’: ‘zhouyu’, ‘age’: 25, ‘sex’: ‘man’}<br>student2 = {‘name’: ‘zhangyifei’, ‘age’: 26, ‘sex’: ‘man’}<br>student3 = {‘name’: ‘wanghaozun’, ‘age’: 24, ‘sex’: ‘man’}</p><p>students = [student1, student2, student3]</p><p>for stu in students:<br>print(stu)</p><p>3.2、字典中嵌套列表（一个key对多个value）：<br>students = {<br>‘zhouyu’: [25, ‘man’],<br>‘zhangyifei’: [26, ‘man’],<br>‘wanghaozun’: [24, ‘man’]<br>}<br>for name, ageAndSex in students.items():<br>print(name)<br>print(ageAndSex)</p><p>3.3、字典中嵌套字典<br>school = {<br>‘students’: {<br>‘zhouyu’: [25, ‘man’],<br>‘zhangyifei’: [26, ‘man’],<br>‘wanghaozun’: [24, ‘man’]<br>},<br>‘teachers’: {<br>‘lishumao’: [45, ‘man’],<br>‘liujing’: [30, ‘woman’],<br>‘wangyingchun’: [65, ‘man’]<br>}<br>}<br>for stu, teacher in school.items():<br>print(stu)<br>print(teacher)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、使用字典&quot;&gt;&lt;a href=&quot;#1、使用字典&quot; class=&quot;headerlink&quot; title=&quot;1、使用字典&quot;&gt;&lt;/a&gt;1、使用字典&lt;/h3&gt;&lt;p&gt;1.1、字典是一系列的k-v对。&lt;br&gt;1.2、用法：student = {‘name’: ‘zhouyu’</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习8-input和while</title>
    <link href="http://example.com/2022/06/10/py_day8/"/>
    <id>http://example.com/2022/06/10/py_day8/</id>
    <published>2022-06-10T07:15:40.656Z</published>
    <updated>2022-06-10T07:26:20.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、input"><a href="#1、input" class="headerlink" title="1、input()"></a>1、input()</h3><p>用法：var = input()<br>input()函数将键入的信息存储到一个变量中；<br>每次使用input()时，都应该指定浅显易懂的提示，告诉用户需要提供什么样的信息。</p><h3 id="2、while"><a href="#2、while" class="headerlink" title="2、while"></a>2、while</h3><p>用法：while 判断条件:</p><p>break退出循环；<br>continue：跳至下一轮循环</p><h3 id="3、使用while循环处理列表和字典"><a href="#3、使用while循环处理列表和字典" class="headerlink" title="3、使用while循环处理列表和字典"></a>3、使用while循环处理列表和字典</h3><blockquote><p>在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。</p></blockquote><h4 id="3-1、-在列表之间移动元素"><a href="#3-1、-在列表之间移动元素" class="headerlink" title="3.1、 在列表之间移动元素"></a>3.1、 在列表之间移动元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line">while unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    print(&quot;Verifying users: &quot; + current_user)</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"></span><br><span class="line">print(&quot;\n The following users have been confirmed: &quot;)</span><br><span class="line">for confirmed_user in confirmed_users:</span><br><span class="line">    print(confirmed_user.title())</span><br></pre></td></tr></table></figure><h4 id="3-2、-删除包含特定值的所有列表元素"><a href="#3-2、-删除包含特定值的所有列表元素" class="headerlink" title="3.2、 删除包含特定值的所有列表元素"></a>3.2、 删除包含特定值的所有列表元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pets = [&#x27;dog&#x27;, &#x27;cat&#x27;, &#x27;dog&#x27;, &#x27;goldfish&#x27;, &#x27;cat&#x27;, &#x27;rabbit&#x27;, &#x27;cat&#x27;]</span><br><span class="line">print(pets)</span><br><span class="line"></span><br><span class="line">while &#x27;cat&#x27; in pets:</span><br><span class="line">    pets.remove(&#x27;cat&#x27;)</span><br><span class="line"></span><br><span class="line">print(pets)</span><br></pre></td></tr></table></figure><h4 id="3-3、使用用户输入来填充字典"><a href="#3-3、使用用户输入来填充字典" class="headerlink" title="3.3、使用用户输入来填充字典"></a>3.3、使用用户输入来填充字典</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">responds = &#123;&#125;</span><br><span class="line"></span><br><span class="line">polling_active = True</span><br><span class="line"></span><br><span class="line">while polling_active:</span><br><span class="line">    name = input(&quot;\nWhat&#x27;s ur name? &quot;)</span><br><span class="line">    response = input(&quot;Witch mountain would u like to climb someday? &quot;)</span><br><span class="line"></span><br><span class="line">    responds[name] = response</span><br><span class="line"></span><br><span class="line">    repeat = input(&quot;Would u like to let another person respond? (yes/no) &quot;)</span><br><span class="line">    if repeat == &#x27;no&#x27;:</span><br><span class="line">        polling_active = False</span><br><span class="line"></span><br><span class="line">print(&quot;\n--- Poll Result ---&quot;)</span><br><span class="line">for name, response in responds.items():</span><br><span class="line">    print(name + &quot;would like to climb&quot; + response + &quot;.&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、input&quot;&gt;&lt;a href=&quot;#1、input&quot; class=&quot;headerlink&quot; title=&quot;1、input()&quot;&gt;&lt;/a&gt;1、input()&lt;/h3&gt;&lt;p&gt;用法：var = input()&lt;br&gt;input()函数将键入的信息存储到一个变量中；&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习6-if语句</title>
    <link href="http://example.com/2022/05/19/py_day6/"/>
    <id>http://example.com/2022/05/19/py_day6/</id>
    <published>2022-05-19T12:20:30.848Z</published>
    <updated>2022-05-19T12:20:30.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、条件测试"><a href="#1、条件测试" class="headerlink" title="1、条件测试"></a>1、条件测试</h3><p>检查列表中某个特定值：in/not in<br>names = [‘zhouyu’, ‘zhangyifei’, ‘wanghaozun’]<br>print(‘zhouyu’ in names) ==&gt; True<br>print(‘zhouy’ not in names) ==&gt; True</p><h3 id="2、if语句"><a href="#2、if语句" class="headerlink" title="2、if语句"></a>2、if语句</h3><p>与java不同，不用加括号；与matlab不同，不用加end作为结束；py的if-else要加冒号，并且靠缩进来判断if里面的语句。<br>此外，java中if-elseif是可以多次判断的。而py中if为true则跳过elseif<br>if: condition<br>    do sth</p><p>if:<br>    do sth1<br>else:<br>    do sth2</p><p>if:<br>    do sth1<br>elseif:<br>    do sth2<br>else:<br>    do sth3</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、条件测试&quot;&gt;&lt;a href=&quot;#1、条件测试&quot; class=&quot;headerlink&quot; title=&quot;1、条件测试&quot;&gt;&lt;/a&gt;1、条件测试&lt;/h3&gt;&lt;p&gt;检查列表中某个特定值：in/not in&lt;br&gt;names = [‘zhouyu’, ‘zhangyifei</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习5-操作列表</title>
    <link href="http://example.com/2022/05/12/py_day5/"/>
    <id>http://example.com/2022/05/12/py_day5/</id>
    <published>2022-05-12T08:28:05.542Z</published>
    <updated>2022-05-12T08:28:05.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、for循环遍历"><a href="#1、for循环遍历" class="headerlink" title="1、for循环遍历"></a>1、for循环遍历</h3><p>结构：for 临时变量 in 列表: （缩进）语句1（缩进）语句2 ……</p><h3 id="2、range-函数"><a href="#2、range-函数" class="headerlink" title="2、range()函数"></a>2、range()函数</h3><p>用法1，遍历数字：for num in range(number1, number2): ……<br>用法2，创建连续数字集合：nums = list(range(1, 6))<br>用法3，创建偶数集合：even_nums = list(range(2, 11, 2))<br>range的范围是number1到number2 - 1，左闭右开</p><p>注意：range(0, 0)、range(2, 0)均是空集合</p><h3 id="3、统计数字列表：min、max、sum"><a href="#3、统计数字列表：min、max、sum" class="headerlink" title="3、统计数字列表：min、max、sum"></a>3、统计数字列表：min、max、sum</h3><p>用法：min(列表)、max(列表)、sum(列表)</p><h3 id="4、列表解析"><a href="#4、列表解析" class="headerlink" title="4、列表解析"></a>4、列表解析</h3><p>列表解析将for循环和创建新元素合并成一行代码，并自动附加新元素。</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"># 列表名 = [表达式 <span class="keyword">for</span>循环]</span><br><span class="line"># 表达式用于生成存储值，<span class="keyword">for</span>循环用于给表达式提供值</span><br></pre></td></tr></table></figure><h3 id="5、切片"><a href="#5、切片" class="headerlink" title="5、切片"></a>5、切片</h3><p>用法1：列表[索引1: 索引2]<br>用法2：列表[: 索引] 不指定首个索引，则自动从表头开始<br>用法3：列表[索引: ]<br>用法4：列表[负数索引: ]  负数索引切表尾</p><h3 id="6、复制列表"><a href="#6、复制列表" class="headerlink" title="6、复制列表"></a>6、复制列表</h3><p>用法：列表副本 = 列表[:]</p><h3 id="7、元组（不可变的列表）"><a href="#7、元组（不可变的列表）" class="headerlink" title="7、元组（不可变的列表）"></a>7、元组（不可变的列表）</h3><p>用法：元组 = (元素1, 元素2, ……)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、for循环遍历&quot;&gt;&lt;a href=&quot;#1、for循环遍历&quot; class=&quot;headerlink&quot; title=&quot;1、for循环遍历&quot;&gt;&lt;/a&gt;1、for循环遍历&lt;/h3&gt;&lt;p&gt;结构：for 临时变量 in 列表: （缩进）语句1（缩进）语句2 ……&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习4-组织列表</title>
    <link href="http://example.com/2022/04/08/py_day4/"/>
    <id>http://example.com/2022/04/08/py_day4/</id>
    <published>2022-04-08T08:07:10.412Z</published>
    <updated>2022-04-08T08:11:19.768Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、sort-和sorted-：永久排序和临时排序"><a href="#1、sort-和sorted-：永久排序和临时排序" class="headerlink" title="1、sort()和sorted()：永久排序和临时排序"></a>1、sort()和sorted()：永久排序和临时排序</h3><p>list.sort()              ：对已存在的列表进行排序，可以带参数 reverse = True<br>sorted(iterable)    ：对一切可迭代对象排序，对对象的副本进行排序，并返回这个副本，可以带参数 reverse = True</p><h3 id="2、reverse-：反转列表"><a href="#2、reverse-：反转列表" class="headerlink" title="2、reverse()：反转列表"></a>2、reverse()：反转列表</h3><p>list.reverse()        ：</p><h3 id="3、len-：返回列表长度"><a href="#3、len-：返回列表长度" class="headerlink" title="3、len()：返回列表长度"></a>3、len()：返回列表长度</h3><p>len(list)                ：</p><h3 id="加餐：sort-内部实现原理"><a href="#加餐：sort-内部实现原理" class="headerlink" title="加餐：sort()内部实现原理"></a>加餐：sort()内部实现原理</h3><p>py中的sort()采用的是 Timsort 算法<br>最坏时间复杂度 O(nlogn)<br>空间复杂度 O(n)<br>相比快排，Timsort是稳定的</p><blockquote><p>Timsort是结合了合并排序（merge sort）和插入排序（insertion sort）而得出的排序算法，它在现实中有很好的效率。Tim Peters在2002年设计了该算法并在Python中使用（TimSort 是 Python 中 list.sort 的默认实现）。该算法找到数据中已经排好序的块-分区，每一个分区叫一个run，然后按规则合并这些run。Pyhton自从2.3版以来一直采用Timsort算法排序，现在Java SE7和Android也采用Timsort算法对数组排序。</p></blockquote><h4 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h4><p>针对现实中需要排序的数据分析，大多数的数据通常都是部分排序好的数据块，Timsort就是利用了这一个特点。<br>Timsort将已经排序好的数据块称为 run，在排序时，Timsort将数据元素放到不同的run里面，并将run按规则进行归并，最后只剩一个run，这个run就是最后的结果。</p><p>Timsort会有一个minrun属性，如果初始的run小于这个minrun，则用插入排序将未排序的数据插入进来，直到达到条件，之后使用归并排序合并多个run。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、sort-和sorted-：永久排序和临时排序&quot;&gt;&lt;a href=&quot;#1、sort-和sorted-：永久排序和临时排序&quot; class=&quot;headerlink&quot; title=&quot;1、sort()和sorted()：永久排序和临时排序&quot;&gt;&lt;/a&gt;1、sort()和</summary>
      
    
    
    
    
  </entry>
  
</feed>
