<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-06-10T08:00:26.103Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python学习9-函数</title>
    <link href="http://example.com/2022/06/10/py_day9/"/>
    <id>http://example.com/2022/06/10/py_day9/</id>
    <published>2022-06-10T07:29:05.111Z</published>
    <updated>2022-06-10T08:00:26.103Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、定义函数"><a href="#1、定义函数" class="headerlink" title="1、定义函数"></a>1、定义函数</h3><p>用法：def 函数名(完成任务需要的信息):<br>        （缩进）函数体</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">def greet_user(username):</span><br><span class="line">    print(&quot;Hello, &quot; + username.title() + &quot;!&quot;)</span><br><span class="line"></span><br><span class="line">greet_user(&#x27;zhouyu&#x27;)</span><br></pre></td></tr></table></figure><h3 id="2、传递实参"><a href="#2、传递实参" class="headerlink" title="2、传递实参"></a>2、传递实参</h3><h4 id="2-1、位置实参"><a href="#2-1、位置实参" class="headerlink" title="2.1、位置实参"></a>2.1、位置实参</h4><blockquote><p>关联方式是基于实参的顺序。这种关联方式被称为位置实参。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, pet_name):</span><br><span class="line">    print(&quot;\nI have a &quot; + animal_type + &quot;.&quot;)</span><br><span class="line">    print(&quot;My &quot; + animal_type + &quot; &#x27;s name is &quot; + pet_name + &quot;.&quot;)</span><br><span class="line"></span><br><span class="line">describe_pet(&#x27;dog&#x27;, &#x27;wangwang&#x27;)</span><br></pre></td></tr></table></figure><h4 id="2-2、关键字实参"><a href="#2-2、关键字实参" class="headerlink" title="2.2、关键字实参"></a>2.2、关键字实参</h4><blockquote><p>关键字实参是传递给函数的名称—值对。关键字实参让你无需考虑函数调用中的实参顺序，还清楚地指出了函数调用中各个值的用途。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(animal_type, pet_name):</span><br><span class="line">    print(&quot;\nI have a &quot; + animal_type + &quot;.&quot;)</span><br><span class="line">    print(&quot;My &quot; + animal_type + &quot; &#x27;s name is &quot; + pet_name + &quot;.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe_pet(animal_type=&#x27;dog&#x27;, pet_name=&#x27;wangwang&#x27;)</span><br></pre></td></tr></table></figure><p>***关键字实参的顺序无关紧要，因为Python知道各个值该存储到哪个形参中。</p><h4 id="2-3、默认值"><a href="#2-3、默认值" class="headerlink" title="2.3、默认值"></a>2.3、默认值</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">def describe_pet(pet_name, animal_type=&#x27;dog&#x27;):</span><br><span class="line">    print(&quot;\nI have a &quot; + animal_type + &quot;.&quot;)</span><br><span class="line">    print(&quot;My &quot; + animal_type + &quot; &#x27;s name is &quot; + pet_name + &quot;.&quot;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">describe_pet(&#x27;wangwang&#x27;)</span><br></pre></td></tr></table></figure><p>***使用默认值时，在形参列表中必须先列出没有默认值的形参，再列出有默认值的实参。<br>这让Python依然能够正确地解读位置实参</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、定义函数&quot;&gt;&lt;a href=&quot;#1、定义函数&quot; class=&quot;headerlink&quot; title=&quot;1、定义函数&quot;&gt;&lt;/a&gt;1、定义函数&lt;/h3&gt;&lt;p&gt;用法：def 函数名(完成任务需要的信息):&lt;br&gt;        （缩进）函数体&lt;/p&gt;
&lt;figure </summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习7-字典</title>
    <link href="http://example.com/2022/06/10/py_day7/"/>
    <id>http://example.com/2022/06/10/py_day7/</id>
    <published>2022-06-10T07:17:33.024Z</published>
    <updated>2022-06-10T07:17:33.084Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、使用字典"><a href="#1、使用字典" class="headerlink" title="1、使用字典"></a>1、使用字典</h3><p>1.1、字典是一系列的k-v对。<br>1.2、用法：student = {‘name’: ‘zhouyu’, ‘age’: 25, ‘sex’: ‘man’}<br>空字典： student = {}<br>1.3、增：<br>student[‘weight’] = 65<br>student[‘nation’] = ‘china’</p><p>1.4、删：<br>del student[‘weight’]</p><p>1.5、改：<br>student[‘weight’] = student[‘weight’] + 10<br>student[‘name’] = ‘zhangyifei’</p><h3 id="2、遍历字典"><a href="#2、遍历字典" class="headerlink" title="2、遍历字典"></a>2、遍历字典</h3><p>2.1、遍历k-v对：<br>for k, v in student.items():<br>print(k)<br>print(v)</p><p>2.2、遍历key：<br>for k in student.keys():<br>print(k)</p><p>for k in student:<br>print(k)</p><p>2.3、按顺序遍历key：<br>for k in sorted(student.keys()):<br>print(k)</p><p>2.4、遍历value：<br>for v in student.values():<br>print(v)</p><p>2.5、用集合set剔除重复：<br>for v in set(student.values()):<br>print(v)</p><h3 id="3、嵌套"><a href="#3、嵌套" class="headerlink" title="3、嵌套"></a>3、嵌套</h3><p>3.1、列表中嵌套字典：<br>student1 = {‘name’: ‘zhouyu’, ‘age’: 25, ‘sex’: ‘man’}<br>student2 = {‘name’: ‘zhangyifei’, ‘age’: 26, ‘sex’: ‘man’}<br>student3 = {‘name’: ‘wanghaozun’, ‘age’: 24, ‘sex’: ‘man’}</p><p>students = [student1, student2, student3]</p><p>for stu in students:<br>print(stu)</p><p>3.2、字典中嵌套列表（一个key对多个value）：<br>students = {<br>‘zhouyu’: [25, ‘man’],<br>‘zhangyifei’: [26, ‘man’],<br>‘wanghaozun’: [24, ‘man’]<br>}<br>for name, ageAndSex in students.items():<br>print(name)<br>print(ageAndSex)</p><p>3.3、字典中嵌套字典<br>school = {<br>‘students’: {<br>‘zhouyu’: [25, ‘man’],<br>‘zhangyifei’: [26, ‘man’],<br>‘wanghaozun’: [24, ‘man’]<br>},<br>‘teachers’: {<br>‘lishumao’: [45, ‘man’],<br>‘liujing’: [30, ‘woman’],<br>‘wangyingchun’: [65, ‘man’]<br>}<br>}<br>for stu, teacher in school.items():<br>print(stu)<br>print(teacher)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、使用字典&quot;&gt;&lt;a href=&quot;#1、使用字典&quot; class=&quot;headerlink&quot; title=&quot;1、使用字典&quot;&gt;&lt;/a&gt;1、使用字典&lt;/h3&gt;&lt;p&gt;1.1、字典是一系列的k-v对。&lt;br&gt;1.2、用法：student = {‘name’: ‘zhouyu’</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习8-input和while</title>
    <link href="http://example.com/2022/06/10/py_day8/"/>
    <id>http://example.com/2022/06/10/py_day8/</id>
    <published>2022-06-10T07:15:40.656Z</published>
    <updated>2022-06-10T07:26:20.345Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、input"><a href="#1、input" class="headerlink" title="1、input()"></a>1、input()</h3><p>用法：var = input()<br>input()函数将键入的信息存储到一个变量中；<br>每次使用input()时，都应该指定浅显易懂的提示，告诉用户需要提供什么样的信息。</p><h3 id="2、while"><a href="#2、while" class="headerlink" title="2、while"></a>2、while</h3><p>用法：while 判断条件:</p><p>break退出循环；<br>continue：跳至下一轮循环</p><h3 id="3、使用while循环处理列表和字典"><a href="#3、使用while循环处理列表和字典" class="headerlink" title="3、使用while循环处理列表和字典"></a>3、使用while循环处理列表和字典</h3><blockquote><p>在for循环中不应修改列表，否则将导致Python难以跟踪其中的元素。要在遍历列表的同时对其进行修改，可使用while循环。</p></blockquote><h4 id="3-1、-在列表之间移动元素"><a href="#3-1、-在列表之间移动元素" class="headerlink" title="3.1、 在列表之间移动元素"></a>3.1、 在列表之间移动元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">unconfirmed_users = [&#x27;a&#x27;, &#x27;b&#x27;, &#x27;c&#x27;, &#x27;d&#x27;]</span><br><span class="line">confirmed_users = []</span><br><span class="line"></span><br><span class="line">while unconfirmed_users:</span><br><span class="line">    current_user = unconfirmed_users.pop()</span><br><span class="line">    print(&quot;Verifying users: &quot; + current_user)</span><br><span class="line">    confirmed_users.append(current_user)</span><br><span class="line"></span><br><span class="line">print(&quot;\n The following users have been confirmed: &quot;)</span><br><span class="line">for confirmed_user in confirmed_users:</span><br><span class="line">    print(confirmed_user.title())</span><br></pre></td></tr></table></figure><h4 id="3-2、-删除包含特定值的所有列表元素"><a href="#3-2、-删除包含特定值的所有列表元素" class="headerlink" title="3.2、 删除包含特定值的所有列表元素"></a>3.2、 删除包含特定值的所有列表元素</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">pets = [&#x27;dog&#x27;, &#x27;cat&#x27;, &#x27;dog&#x27;, &#x27;goldfish&#x27;, &#x27;cat&#x27;, &#x27;rabbit&#x27;, &#x27;cat&#x27;]</span><br><span class="line">print(pets)</span><br><span class="line"></span><br><span class="line">while &#x27;cat&#x27; in pets:</span><br><span class="line">    pets.remove(&#x27;cat&#x27;)</span><br><span class="line"></span><br><span class="line">print(pets)</span><br></pre></td></tr></table></figure><h4 id="3-3、使用用户输入来填充字典"><a href="#3-3、使用用户输入来填充字典" class="headerlink" title="3.3、使用用户输入来填充字典"></a>3.3、使用用户输入来填充字典</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">responds = &#123;&#125;</span><br><span class="line"></span><br><span class="line">polling_active = True</span><br><span class="line"></span><br><span class="line">while polling_active:</span><br><span class="line">    name = input(&quot;\nWhat&#x27;s ur name? &quot;)</span><br><span class="line">    response = input(&quot;Witch mountain would u like to climb someday? &quot;)</span><br><span class="line"></span><br><span class="line">    responds[name] = response</span><br><span class="line"></span><br><span class="line">    repeat = input(&quot;Would u like to let another person respond? (yes/no) &quot;)</span><br><span class="line">    if repeat == &#x27;no&#x27;:</span><br><span class="line">        polling_active = False</span><br><span class="line"></span><br><span class="line">print(&quot;\n--- Poll Result ---&quot;)</span><br><span class="line">for name, response in responds.items():</span><br><span class="line">    print(name + &quot;would like to climb&quot; + response + &quot;.&quot;)</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、input&quot;&gt;&lt;a href=&quot;#1、input&quot; class=&quot;headerlink&quot; title=&quot;1、input()&quot;&gt;&lt;/a&gt;1、input()&lt;/h3&gt;&lt;p&gt;用法：var = input()&lt;br&gt;input()函数将键入的信息存储到一个变量中；&lt;b</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习6-if语句</title>
    <link href="http://example.com/2022/05/19/py_day6/"/>
    <id>http://example.com/2022/05/19/py_day6/</id>
    <published>2022-05-19T12:20:30.848Z</published>
    <updated>2022-05-19T12:20:30.914Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、条件测试"><a href="#1、条件测试" class="headerlink" title="1、条件测试"></a>1、条件测试</h3><p>检查列表中某个特定值：in/not in<br>names = [‘zhouyu’, ‘zhangyifei’, ‘wanghaozun’]<br>print(‘zhouyu’ in names) ==&gt; True<br>print(‘zhouy’ not in names) ==&gt; True</p><h3 id="2、if语句"><a href="#2、if语句" class="headerlink" title="2、if语句"></a>2、if语句</h3><p>与java不同，不用加括号；与matlab不同，不用加end作为结束；py的if-else要加冒号，并且靠缩进来判断if里面的语句。<br>此外，java中if-elseif是可以多次判断的。而py中if为true则跳过elseif<br>if: condition<br>    do sth</p><p>if:<br>    do sth1<br>else:<br>    do sth2</p><p>if:<br>    do sth1<br>elseif:<br>    do sth2<br>else:<br>    do sth3</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、条件测试&quot;&gt;&lt;a href=&quot;#1、条件测试&quot; class=&quot;headerlink&quot; title=&quot;1、条件测试&quot;&gt;&lt;/a&gt;1、条件测试&lt;/h3&gt;&lt;p&gt;检查列表中某个特定值：in/not in&lt;br&gt;names = [‘zhouyu’, ‘zhangyifei</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习5-操作列表</title>
    <link href="http://example.com/2022/05/12/py_day5/"/>
    <id>http://example.com/2022/05/12/py_day5/</id>
    <published>2022-05-12T08:28:05.542Z</published>
    <updated>2022-05-12T08:28:05.670Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、for循环遍历"><a href="#1、for循环遍历" class="headerlink" title="1、for循环遍历"></a>1、for循环遍历</h3><p>结构：for 临时变量 in 列表: （缩进）语句1（缩进）语句2 ……</p><h3 id="2、range-函数"><a href="#2、range-函数" class="headerlink" title="2、range()函数"></a>2、range()函数</h3><p>用法1，遍历数字：for num in range(number1, number2): ……<br>用法2，创建连续数字集合：nums = list(range(1, 6))<br>用法3，创建偶数集合：even_nums = list(range(2, 11, 2))<br>range的范围是number1到number2 - 1，左闭右开</p><p>注意：range(0, 0)、range(2, 0)均是空集合</p><h3 id="3、统计数字列表：min、max、sum"><a href="#3、统计数字列表：min、max、sum" class="headerlink" title="3、统计数字列表：min、max、sum"></a>3、统计数字列表：min、max、sum</h3><p>用法：min(列表)、max(列表)、sum(列表)</p><h3 id="4、列表解析"><a href="#4、列表解析" class="headerlink" title="4、列表解析"></a>4、列表解析</h3><p>列表解析将for循环和创建新元素合并成一行代码，并自动附加新元素。</p><p>用法：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">squares = [value**<span class="number">2</span> <span class="keyword">for</span> value <span class="keyword">in</span> <span class="title function_">range</span>(<span class="number">1</span>, <span class="number">11</span>)]</span><br><span class="line"># 列表名 = [表达式 <span class="keyword">for</span>循环]</span><br><span class="line"># 表达式用于生成存储值，<span class="keyword">for</span>循环用于给表达式提供值</span><br></pre></td></tr></table></figure><h3 id="5、切片"><a href="#5、切片" class="headerlink" title="5、切片"></a>5、切片</h3><p>用法1：列表[索引1: 索引2]<br>用法2：列表[: 索引] 不指定首个索引，则自动从表头开始<br>用法3：列表[索引: ]<br>用法4：列表[负数索引: ]  负数索引切表尾</p><h3 id="6、复制列表"><a href="#6、复制列表" class="headerlink" title="6、复制列表"></a>6、复制列表</h3><p>用法：列表副本 = 列表[:]</p><h3 id="7、元组（不可变的列表）"><a href="#7、元组（不可变的列表）" class="headerlink" title="7、元组（不可变的列表）"></a>7、元组（不可变的列表）</h3><p>用法：元组 = (元素1, 元素2, ……)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、for循环遍历&quot;&gt;&lt;a href=&quot;#1、for循环遍历&quot; class=&quot;headerlink&quot; title=&quot;1、for循环遍历&quot;&gt;&lt;/a&gt;1、for循环遍历&lt;/h3&gt;&lt;p&gt;结构：for 临时变量 in 列表: （缩进）语句1（缩进）语句2 ……&lt;/p&gt;
&lt;</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习4-组织列表</title>
    <link href="http://example.com/2022/04/08/py_day4/"/>
    <id>http://example.com/2022/04/08/py_day4/</id>
    <published>2022-04-08T08:07:10.412Z</published>
    <updated>2022-04-08T08:11:19.768Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1、sort-和sorted-：永久排序和临时排序"><a href="#1、sort-和sorted-：永久排序和临时排序" class="headerlink" title="1、sort()和sorted()：永久排序和临时排序"></a>1、sort()和sorted()：永久排序和临时排序</h3><p>list.sort()              ：对已存在的列表进行排序，可以带参数 reverse = True<br>sorted(iterable)    ：对一切可迭代对象排序，对对象的副本进行排序，并返回这个副本，可以带参数 reverse = True</p><h3 id="2、reverse-：反转列表"><a href="#2、reverse-：反转列表" class="headerlink" title="2、reverse()：反转列表"></a>2、reverse()：反转列表</h3><p>list.reverse()        ：</p><h3 id="3、len-：返回列表长度"><a href="#3、len-：返回列表长度" class="headerlink" title="3、len()：返回列表长度"></a>3、len()：返回列表长度</h3><p>len(list)                ：</p><h3 id="加餐：sort-内部实现原理"><a href="#加餐：sort-内部实现原理" class="headerlink" title="加餐：sort()内部实现原理"></a>加餐：sort()内部实现原理</h3><p>py中的sort()采用的是 Timsort 算法<br>最坏时间复杂度 O(nlogn)<br>空间复杂度 O(n)<br>相比快排，Timsort是稳定的</p><blockquote><p>Timsort是结合了合并排序（merge sort）和插入排序（insertion sort）而得出的排序算法，它在现实中有很好的效率。Tim Peters在2002年设计了该算法并在Python中使用（TimSort 是 Python 中 list.sort 的默认实现）。该算法找到数据中已经排好序的块-分区，每一个分区叫一个run，然后按规则合并这些run。Pyhton自从2.3版以来一直采用Timsort算法排序，现在Java SE7和Android也采用Timsort算法对数组排序。</p></blockquote><h4 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h4><p>针对现实中需要排序的数据分析，大多数的数据通常都是部分排序好的数据块，Timsort就是利用了这一个特点。<br>Timsort将已经排序好的数据块称为 run，在排序时，Timsort将数据元素放到不同的run里面，并将run按规则进行归并，最后只剩一个run，这个run就是最后的结果。</p><p>Timsort会有一个minrun属性，如果初始的run小于这个minrun，则用插入排序将未排序的数据插入进来，直到达到条件，之后使用归并排序合并多个run。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;1、sort-和sorted-：永久排序和临时排序&quot;&gt;&lt;a href=&quot;#1、sort-和sorted-：永久排序和临时排序&quot; class=&quot;headerlink&quot; title=&quot;1、sort()和sorted()：永久排序和临时排序&quot;&gt;&lt;/a&gt;1、sort()和</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习3-列表的增删改查</title>
    <link href="http://example.com/2022/04/01/py_day3/"/>
    <id>http://example.com/2022/04/01/py_day3/</id>
    <published>2022-04-01T03:38:56.757Z</published>
    <updated>2022-04-01T03:38:56.859Z</updated>
    
    <content type="html"><![CDATA[<p>事真的好多，老师发了200块让帮忙审稿，从研一到现在不记得审了多少篇IEEE了，（关键我都看不懂别人写的文章，啥领域的都让我审）。<br>大论文第三章被老师否了，说不够新意，让我重新增加内容，加大难度，难顶<br>小论文还没改好latex，啥时候能投出去呢？</p><blockquote><p>列表是元素的集合，栈结构</p></blockquote><h3 id="创建一个列表并打印"><a href="#创建一个列表并打印" class="headerlink" title="创建一个列表并打印"></a>创建一个列表并打印</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">names = [&#x27;zhouyu&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;zhouyu&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br></pre></td></tr></table></figure><h3 id="查"><a href="#查" class="headerlink" title="查"></a>查</h3><p>通过索引访问<br>names[index]<br>表头索引是0，-1索引表示表尾，-2表示尾巴第二个数，以此类推</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(names[0])</span><br><span class="line">print(names[-1])</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zhouyu</span><br><span class="line">zhangyifei</span><br></pre></td></tr></table></figure><p><em><strong>注意：索引不能超过列表长度</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(names[100])</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IndexError: list index out of range</span><br></pre></td></tr></table></figure><h3 id="改"><a href="#改" class="headerlink" title="改"></a>改</h3><p> 对元素进行修改<br> names[index] = ‘xxx’</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(names)</span><br><span class="line">names[0] = &#x27;zhourui&#x27;</span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;zhouyu&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br><span class="line">[&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br></pre></td></tr></table></figure><h3 id="增"><a href="#增" class="headerlink" title="增"></a>增</h3><p>1、appen()方法：在末尾添加元素<br>names.append(‘xxx’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(names)</span><br><span class="line">names.append(&#x27;zhouqingxiang&#x27;)</span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br><span class="line">[&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;, &#x27;zhouqingxiang&#x27;]</span><br></pre></td></tr></table></figure><p>2、insert()方法：在中间插入元素<br>names.insert(index, ‘xxx’)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(names)</span><br><span class="line">names.insert(0, &#x27;zhouqingxiang&#x27;)</span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br><span class="line">[&#x27;zhouqingxiang&#x27;, &#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br></pre></td></tr></table></figure><p><em><strong>注意1：如果在 -1 处插入，则是插入在倒数第二个，在 0 插入则插入至表头</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(names)</span><br><span class="line">names.insert(-1, &#x27;zhouqingxiang&#x27;)</span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br><span class="line">[&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhouqingxiang&#x27;, &#x27;zhangyifei&#x27;]</span><br></pre></td></tr></table></figure><p><em><strong>注意2：如果插入的索引超过列表长度，不会报错，会在表尾插入</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">print(names)</span><br><span class="line">names.insert(100, &#x27;zhouqingxiang&#x27;)</span><br><span class="line">print(names)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br><span class="line">[&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;, &#x27;zhouqingxiang&#x27;]</span><br></pre></td></tr></table></figure><h3 id="删"><a href="#删" class="headerlink" title="删"></a>删</h3><p>1、del语句：指定位置删除元素<br>del names[index]</p><p>2、pop()方法：弹出元素<br>names.pop()：末尾弹出<br>names.pop(index)：索引位置弹出</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">print(&quot;names中的元素: %s&quot; % names)</span><br><span class="line">names2 = []</span><br><span class="line">names2.append(names.pop())</span><br><span class="line">print(&quot;弹出末尾元素后，names中的元素: %s&quot; % names)</span><br><span class="line">print(&quot;names2中的元素: %s&quot; % names2)</span><br></pre></td></tr></table></figure><p>输出结果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">names中的元素: [&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;, &#x27;zhangyifei&#x27;]</span><br><span class="line">弹出末尾元素后，names中的元素: [&#x27;zhourui&#x27;, &#x27;wanghaozun&#x27;]</span><br><span class="line">names2中的元素: [&#x27;zhangyifei&#x27;]</span><br></pre></td></tr></table></figure><p><em><strong>注意3：如果pop()不指定index，则是弹出末尾元素。如果pop(index)，则是弹出索引处元素。如果pop(-1)，与pop()相当。</strong></em><br><em><strong>注意4：如果pop(index)中索引超过列表长度，会报错</strong></em></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">IndexError: pop index out of range</span><br></pre></td></tr></table></figure><p>3、remove()方法：根据键值删除元素，remove()也可以使用删除的值<br>names.remove(‘xxx’)</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;事真的好多，老师发了200块让帮忙审稿，从研一到现在不记得审了多少篇IEEE了，（关键我都看不懂别人写的文章，啥领域的都让我审）。&lt;br&gt;大论文第三章被老师否了，说不够新意，让我重新增加内容，加大难度，难顶&lt;br&gt;小论文还没改好latex，啥时候能投出去呢？&lt;/p&gt;
&lt;bl</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习2-字符串和数字</title>
    <link href="http://example.com/2022/03/27/py_day2/"/>
    <id>http://example.com/2022/03/27/py_day2/</id>
    <published>2022-03-27T11:55:42.974Z</published>
    <updated>2022-03-27T11:59:58.737Z</updated>
    
    <content type="html"><![CDATA[<p>用了小书匠来写文本，客户端上预览的效果格式正确，怎么一上传到github上格式就不对了捏？<br>还没整明白，慢慢来吧。<br>初次学py，发现py和matlab的语法相似啊</p><blockquote><p>py的数据类型有六个：数字、字符串、列表、元组、集合、字典<br>其中：数字、字符串、元组是不可变的；列表、字典、集合是可变的</p></blockquote><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p><em><strong>java中的字符串是类，py里面变成了数据类型。</strong></em></p><p>语法差不多，双引号””和单引号’’都能用，拼接是是用加号+，目的应该就是为了灵活输出 “ 以及 ‘ 吧。<br>书上给了几个字符串方法：<br>    title()：首字母大写显示单词<br>    lower()：全部变小写<br>    upper()：全部变大写<br>    restrip()：删除末尾空白，调用这个语句看上去好像只是删除了副本，要想彻底删除得用下面这个语句</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str = str.restrip()</span><br></pre></td></tr></table></figure><p>lstrip()：删除左边空白<br>rstrip()：删除右边空白</p><h3 id="数字"><a href="#数字" class="headerlink" title="数字"></a>数字</h3><h4 id="1、整数"><a href="#1、整数" class="headerlink" title="1、整数"></a>1、整数</h4><p>py中可以用操作数直接表示次方：**<br>例如：3 ** 2<br>&gt;&gt;&gt; 9</p><h4 id="2、浮点数"><a href="#2、浮点数" class="headerlink" title="2、浮点数"></a>2、浮点数</h4><p>py中的浮点数直接表示，但也会存在精度问题</p><p><em><strong>数字运算基本和java类似</strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;用了小书匠来写文本，客户端上预览的效果格式正确，怎么一上传到github上格式就不对了捏？&lt;br&gt;还没整明白，慢慢来吧。&lt;br&gt;初次学py，发现py和matlab的语法相似啊&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;py的数据类型有六个：数字、字符串、列表、元组、集合、字典</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>Python学习1-变量</title>
    <link href="http://example.com/2022/03/26/py_day1/"/>
    <id>http://example.com/2022/03/26/py_day1/</id>
    <published>2022-03-26T02:32:23.308Z</published>
    <updated>2022-03-26T02:41:19.522Z</updated>
    
    <content type="html"><![CDATA[<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h4 id="对比1：py变量不用声明"><a href="#对比1：py变量不用声明" class="headerlink" title="对比1：py变量不用声明"></a>对比1：py变量不用声明</h4><p> <strong>java ：</strong><br>1、变量就是申请内存来存储值。也就是说，当创建变量的时候，需要在内存中申请空间。<br>2、内存管理系统根据变量的类型为变量分配存储空间，分配的空间只能用来储存该类型数据。因此，通过定义不同类型的变量，可以在内存中储存整数、小数或者字符。</p><p><strong>与java不同，py的变量不需要预先定义类型。</strong><br><strong>py：</strong><br>Python 中的变量不需要声明。每个变量在使用前都必须赋值，变量赋值以后该变量才会被创建。</p><p><strong>py的变量没有自动初始化，因此在使用之前必须先赋好值。</strong></p><h4 id="对比2：py变量没有变量（对象）类型"><a href="#对比2：py变量没有变量（对象）类型" class="headerlink" title="对比2：py变量没有变量（对象）类型"></a>对比2：py变量没有变量（对象）类型</h4><p> <strong>java ：</strong><br>支持的变量类型有：类变量、实例变量、局部变量</p><p><strong>py：</strong><br>变量就是变量，它没有类型，我们所说的”类型”是变量所指的内存中对象的类型。</p><p>java：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">String message;</span><br><span class="line">message = &quot;This is a string&quot;;</span><br></pre></td></tr></table></figure><p>python:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">message = &quot;This is a string&quot;</span><br></pre></td></tr></table></figure><p><em><strong>注意：py语句末尾不用加分号，以换行表示语句结束</strong></em></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;变量&quot;&gt;&lt;a href=&quot;#变量&quot; class=&quot;headerlink&quot; title=&quot;变量&quot;&gt;&lt;/a&gt;变量&lt;/h3&gt;&lt;h4 id=&quot;对比1：py变量不用声明&quot;&gt;&lt;a href=&quot;#对比1：py变量不用声明&quot; class=&quot;headerlink&quot; title=&quot;对</summary>
      
    
    
    
    
  </entry>
  
</feed>
